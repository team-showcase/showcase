"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs = __importStar(require("fs"));
const typescript_json_schema_1 = require("typescript-json-schema");
const fs_path_1 = require("fs-path");
const compilerOptions = {
    skipLibCheck: true
};
/**
 * Convert interfaces to json schema
 * @param path - path to interfaces
 * @param files - file names, filename must match the main symbol (interface) in the content of the file
 */
function convertInterfaces(path, files) {
    const schemas = [];
    const paths = [];
    files.forEach((file) => {
        paths.push(path_1.join(path, file));
    });
    files.forEach((file) => {
        const generator = typescript_json_schema_1.buildGenerator(typescript_json_schema_1.getProgramFromFiles([path_1.join(path, file)], compilerOptions), {
            noExtraProps: true,
            required: true // Create required array for non-optional properties.
        });
        schemas[file.replace('ts', 'json')] = generator.getSchemaForSymbol(file.replace('.ts', ''));
    });
    return schemas;
}
function writeSchemasToFile(path, schemas, version) {
    for (const schema in schemas) {
        const file = path_1.join(path, version, schema);
        fs_path_1.writeFile(file, JSON.stringify(schemas[schema], null, 2), function (err) {
            if (err) {
                return console.log(err);
            }
            console.log("File: '" + file + "' saved.");
        });
    }
}
async function toJsonSchema(outputPath) {
    let fileNames = [];
    let schemas = [];
    const paths = [];
    let version;
    paths.push(path_1.join('src', 'specification', 'v2', 'pages'));
    paths.push(path_1.join('src', 'specification', 'v4', 'pages'));
    for (let index = 0; index < paths.length; index++) {
        fs.readdir(paths[index], function (err, files) {
            if (err) {
                return console.error(err);
            }
            files.forEach(function (pathName) {
                const fileName = path_1.basename(pathName);
                if (fileName !== 'index.ts') {
                    if (!paths[index]) {
                        paths[index] = pathName.replace(fileName, '');
                    }
                    fileNames.push(fileName);
                }
            });
            schemas = convertInterfaces(paths[index], fileNames);
            fileNames = [];
            version = paths[index].split(path_1.sep)[2];
            writeSchemasToFile(outputPath, schemas, version);
        });
    }
    //app.json
    schemas = convertInterfaces(path_1.join('src', 'specification', 'v2'), ['ApplicationV2.ts']);
    writeSchemasToFile(outputPath, schemas, 'v2');
    schemas = convertInterfaces(path_1.join('src', 'specification', 'v4'), ['ApplicationV4.ts']);
    writeSchemasToFile(outputPath, schemas, 'v4');
}
toJsonSchema(path_1.join('schemas'));
//# sourceMappingURL=to-json-schema.js.map