"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * This file implements the interface 'Specification' from ./types and serves as API to specification
 */
const page_1 = require("./specification/common/page");
const schemaAccess_1 = require("./specification/schemaAccess");
const generate_1 = require("./sync/v2/generate");
const generate_2 = require("./sync/v4/generate");
const export_1 = require("./sync/v2/export/export");
const import_1 = require("./sync/v2/import");
const export_2 = require("./sync/v4/export/export");
const import_2 = require("./sync/v4/import");
const common_1 = require("./sync/common");
/**
 * Return the generic (project independent) JSON schema
 * @param specification - reference to spec
 * @param version - Fiori elements version (v2 or v4)
 * @param schemaType - type of the schema, e.g. ListReport, ObjectPage
 */
var schemaAccess_2 = require("./specification/schemaAccess");
exports.getGenericSchema = schemaAccess_2.getGenericSchema;
/**
 * Generate JSON schema for a given Fiori elements version and page type
 * @param generateParameters: the input structure that contains the version, schema type, and parameters
 */
function generateSchema(generateParameters) {
    let schema;
    if (generateParameters[page_1.FioriElementsVersion.v2]) {
        /**
         * Handle v2 schema generation
         */
        const v2Params = generateParameters[page_1.FioriElementsVersion.v2];
        if (v2Params[schemaAccess_1.SchemaType.ListReport]) {
            const { genericSchema, entitySet, annotations } = v2Params[schemaAccess_1.SchemaType.ListReport];
            schema = generate_1.generateListReportInterfaceV2(genericSchema, entitySet, annotations);
        }
        else if (v2Params[schemaAccess_1.SchemaType.ObjectPage]) {
            const { genericSchema, entitySet, annotations, manifest } = v2Params[schemaAccess_1.SchemaType.ObjectPage];
            schema = generate_1.generateObjectPageInterfaceV2(genericSchema, entitySet, annotations, manifest);
        }
        else if (v2Params[schemaAccess_1.SchemaType.OverviewPage]) {
            const { genericSchema } = v2Params[schemaAccess_1.SchemaType.OverviewPage];
            schema = generate_1.generateOVPInterfaceV2(genericSchema);
        }
        else if (v2Params[schemaAccess_1.SchemaType.AnalyticalListPage]) {
            const { genericSchema, entitySet, annotations } = v2Params[schemaAccess_1.SchemaType.AnalyticalListPage];
            schema = generate_1.generateAnalyticalListPageInterfaceV2(genericSchema, entitySet, annotations);
        }
    }
    else if (generateParameters[page_1.FioriElementsVersion.v4]) {
        /**
         * Handle v4 schema generation
         */
        const v4Params = generateParameters[page_1.FioriElementsVersion.v4];
        if (v4Params[schemaAccess_1.SchemaType.ListReport]) {
            const { genericSchema } = v4Params[schemaAccess_1.SchemaType.ListReport];
            schema = generate_2.generateListReportInterfaceV4(genericSchema);
        }
        else if (v4Params[schemaAccess_1.SchemaType.ObjectPage]) {
            const { genericSchema, entitySet, annotations, manifest } = v4Params[schemaAccess_1.SchemaType.ObjectPage];
            schema = generate_2.generateObjectPageInterfaceV4(genericSchema, entitySet, annotations, manifest);
        }
        else if (v4Params[schemaAccess_1.SchemaType.AnalyticalListPage]) {
            const { genericSchema } = v4Params[schemaAccess_1.SchemaType.AnalyticalListPage];
            schema = generate_2.generateAnalyticalListPageSchemaV4(genericSchema);
        }
    }
    return schema;
}
exports.generateSchema = generateSchema;
/**
 * Exports a config (src/*.json, src/pages/*.json) to flex changes and manifest settings
 * @param exportParameters - parameters to control the export
 */
function exportConfig(exportParameters) {
    let exportResults;
    if (exportParameters[page_1.FioriElementsVersion.v2]) {
        /**
         * Handle v2 export
         */
        const v2Params = exportParameters[page_1.FioriElementsVersion.v2];
        exportResults = export_1.exportPageV2(v2Params, exportParameters.ui5Version);
    }
    else if (exportParameters[page_1.FioriElementsVersion.v4]) {
        /**
         * Handle v4 export
         */
        const v4Params = exportParameters[page_1.FioriElementsVersion.v4];
        exportResults = export_2.exportPageV4(v4Params, exportParameters.ui5Version);
    }
    return exportResults;
}
exports.exportConfig = exportConfig;
/**
 * Imports manifest settings and flex changes to a config (src/*.json, src/pages/*.json)
 * @param importParameters - parameters to control the import
 */
function importConfig(importParameters) {
    let schema;
    if (importParameters[page_1.FioriElementsVersion.v2]) {
        /**
         * Handle v2 import
         */
        const v2Params = importParameters[page_1.FioriElementsVersion.v2];
        if (v2Params[schemaAccess_1.SchemaType.ListReport]) {
            const { manifest, flex, jsonSchema } = v2Params[schemaAccess_1.SchemaType.ListReport];
            schema = import_1.createListReportConfig(manifest, flex, jsonSchema);
        }
        else if (v2Params[schemaAccess_1.SchemaType.ObjectPage]) {
            const { manifest, flex, jsonSchema, entitySet } = v2Params[schemaAccess_1.SchemaType.ObjectPage];
            schema = import_1.createObjectPageConfig(manifest, flex, jsonSchema, entitySet);
        }
        else if (v2Params[schemaAccess_1.SchemaType.OverviewPage]) {
            const { manifest, jsonSchema } = v2Params[schemaAccess_1.SchemaType.OverviewPage];
            schema = import_1.createOverviewPageConfig(manifest, jsonSchema);
        }
        else if (v2Params[schemaAccess_1.SchemaType.AnalyticalListPage]) {
            const { manifest, flex, jsonSchema } = v2Params[schemaAccess_1.SchemaType.AnalyticalListPage];
            schema = import_1.createAnalyticalListPageConfig(manifest, flex, jsonSchema);
        }
    }
    else if (importParameters[page_1.FioriElementsVersion.v4]) {
        /**
         * Handle v4 import
         */
        const v4Params = importParameters[page_1.FioriElementsVersion.v4];
        if (v4Params[schemaAccess_1.SchemaType.ListReport]) {
            const { manifest, jsonSchema } = v4Params[schemaAccess_1.SchemaType.ListReport];
            schema = import_2.createListReportConfig(manifest, jsonSchema);
        }
        else if (v4Params[schemaAccess_1.SchemaType.ObjectPage]) {
            const { manifest, jsonSchema, routingId } = v4Params[schemaAccess_1.SchemaType.ObjectPage];
            schema = import_2.createObjectPageConfig(manifest, jsonSchema, routingId);
        }
        else if (v4Params[schemaAccess_1.SchemaType.AnalyticalListPage]) {
            const { manifest, jsonSchema } = v4Params[schemaAccess_1.SchemaType.AnalyticalListPage];
            schema = import_2.createAnalyticalListPageConfig(manifest, jsonSchema);
        }
        /* ToDo: transfer AppProvider
        else if (v4Params[SchemaType.Application]) {
        } */
    }
    return schema;
}
exports.importConfig = importConfig;
/**
 * Evaluates all project files and generates app schemas and configs out of it
 * @param importParameters - parameters to control the import; here: all relevant project files
 * @returns a list of files, comprising app schemas and configs
 */
async function importProject(importParameters) {
    const files = await common_1.importProjectSchemaAndConfig(importParameters);
    return files;
}
exports.importProject = importProject;
/**
 * Evaluates all project files and generates app schemas out of it, but no configs
 * @param importParameters - parameters to control the import; here: all relevant project files
 * @returns a list of files, comprising all app schemas
 */
async function importProjectSchema(importParameters) {
    const files = await common_1.importProjectSchema(importParameters);
    return files;
}
exports.importProjectSchema = importProjectSchema;
/**
 * Returns specification API version.
 * @return {ApiVersion} Object of API version.
 */
function getApiVersion() {
    return {
        version: '1'
    };
}
exports.getApiVersion = getApiVersion;
//# sourceMappingURL=api.js.map