import { Manifest } from '../../specification/common/webapp/manifest';
import { EntityType } from '@sap-ux/vocabularies-types';
export declare enum ExportArtifacts {
    flex = "flex",
    manifest = "manifest"
}
export declare enum DirName {
    Schemas = ".schemas",
    Pages = "pages"
}
export declare enum FileName {
    App = "app.json"
}
export declare const FacetTitlePrefix = "Facet ID: ";
export interface ExportResults {
    flexChanges: string[];
    manifest: Manifest;
}
export declare enum ControlType {
    Table = "sap.m.Table",
    TableColumn = "sap.m.Column",
    SmartTable = "sap.ui.comp.smarttable.SmartTable",
    SmartFilterBar = "sap.ui.comp.smartfilterbar.SmartFilterBar",
    SmartChart = "sap.ui.comp.smartchart.SmartChart",
    Button = "sap.m.Button",
    ToolbarButton = "sap.m.OverflowToolbarButton",
    Avatar = "sap.f.Avatar",
    ObjectPageDynamicHeaderTitle = "sap.uxap.ObjectPageDynamicHeaderTitle",
    ObjectPageGridProperties = "sap.ui.layout.GridData",
    ObjectPageHeader = "sap.uxap.ObjectPageHeader",
    ObjectPageLayout = "sap.uxap.ObjectPageLayout",
    DynamicPage = "sap.f.DynamicPage",
    Form = "sap.ui.layout.form",
    Chart = "sap.suite.ui.microchart"
}
export interface ChangeContent {
    property: string;
    newValue?: boolean | number | string | object;
    newBinding?: string | object;
}
/**
 * Taken over from https://github.com/sap-staging/ui5-flexibility-utils/blob/origin/master/src/changeUtils.js
 */
export interface ChangeDefinition {
    controlId: string;
    controlType: string;
    type: string;
    content: ChangeContent;
    isCustomer: boolean;
    sapui5Version: string;
    creatingTool: string;
    id: string;
    reference: string;
    appVersion: string;
    creation: string;
}
/**
 * Taken over from https://github.com/sap-staging/ui5-flexibility-utils/blob/origin/master/src/changeUtils.js
 */
export interface ChangeDefinitionInCreation {
    controlId: string;
    controlType: string;
    type?: string;
    content: ChangeContent;
    isCustomer?: boolean;
    sapui5Version?: string;
    creatingTool?: string;
}
export declare type ExportToFlex = (change: ChangeDefinitionInCreation, manifest: Manifest) => string;
export declare type ImportFromFlex = (externalChange: string) => ChangeDefinition;
export declare type ControlTypeFunction = () => ControlType;
export declare type ControlIdFunction = (baseId: string, idBreadcrumbs: string[], breadcrumbs: string[], controlType?: ControlTypeFunction, title?: string) => string;
export interface FlexExportAdapter {
    controlId: ControlIdFunction;
    controlType: ControlTypeFunction;
    exportFunction: ExportToFlex;
}
export interface FlexImportAdapter {
    controlId: ControlIdFunction;
    controlType: ControlTypeFunction;
    importFunction: ImportFromFlex;
}
export declare type ManifestPath = (pageKeys?: string[], sectionId?: string) => string;
export interface ManifestConverter {
    path: ManifestPath;
    key?: string;
    import?: (value: unknown, sectionId?: string) => unknown;
    export?: ((manifest: unknown, object: unknown) => unknown) | boolean;
}
export interface SyncRule {
    flex?: FlexExportAdapter;
    manifest?: ManifestConverter;
    generate?: (schema: object, definition: object, propertyName: string) => unknown;
}
export interface Content {
    property: string;
    oldValue?: string | boolean | number | object;
    newValue: string | boolean | number | object;
}
export interface Selector {
    id: string;
    type: string;
    idIsLocal?: boolean;
}
export interface PageLayoutInformation {
    id: string;
    pageId: string;
}
export interface FakeLRepSettings {
    isKeyUser: boolean;
    isAtoAvailable: boolean;
    isProductiveSystem: boolean;
}
export interface ValidityInformation {
    since: string;
    deprecated?: Deprecated;
}
export interface DeprecatedProperties {
    [key: string]: ValidityInformation;
}
export interface Deprecated {
    since: string;
    text?: string;
}
export interface ServiceMetadata {
    $EntityContainer: string;
    $Reference: {
        [url: string]: {
            $Include: {
                $Alias: string;
                $Namespace: string;
            };
        };
    };
    $Version: string;
    [key: string]: any;
}
export interface AnnotationData {
    dataSourceUri: string;
    fileContent: string;
}
export interface FacetConfig {
    base: string;
    lineItem?: string[];
    Label?: string;
    ID?: string;
    entityType?: EntityType;
}
export interface SubSectionConfig {
    base: string;
    Label?: string;
    ID?: string;
    facets: FacetConfigs;
}
export interface FacetConfigs {
    [key: string]: FacetConfig | SubSectionConfig;
}
export interface File {
    dataSourceUri: string;
    fileContent: string;
}
export interface Files {
    [name: string]: object;
}
export interface FacetSection {
    key: string;
    label?: string;
    ID?: string;
    custom?: boolean;
}
export interface SchemaFilePath {
    filename: string;
    path: string;
}
export declare const BindingPropertyRegexAsString = "^{[A-Za-z0-9{}&$@? _|,>'[\\]\\/:=.]+}$";
