"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../specification/common");
const types_1 = require("./types");
const utils_1 = require("./utils");
const schemaAccess_1 = require("../../specification/schemaAccess");
class AppProvider {
    constructor(manifest, schemas, home, pages, version, settings) {
        // Store controller names which should be handled latelly
        this.unhandledControllers = [];
        const schemaFile = utils_1.getSchemaFilePath(schemaAccess_1.SchemaType.Application);
        this.app = Object.assign({ $schema: schemaFile.path, id: manifest['sap.app'].id, pages,
            home, target: {
                fioriElements: version,
                odata: version === common_1.FioriElementsVersion.v2 ? common_1.OdataVersion.v2 : common_1.OdataVersion.v4
            } }, (settings && { settings }));
        this.schemas = schemas;
    }
    /**
     * Create config files for app (app.json) and pages (pages/{name}.json).
     * This is basically a copy of createFiles optimized to be used in FTFS:
     * it always uses posix path notation with forward slash (/)
     * @param {ConverterOutput} oDataServiceAVT - Complete service information, as returned by annotation vocabularies tool
     * @returns app and page files as separate objects
     */
    createConfigFiles(oDataServiceAVT) {
        const pageConfigs = {};
        const appConfig = {};
        let page, entityType;
        // add schema reference to all pages
        for (const pageId in this.app.pages) {
            page = this.app.pages[pageId];
            if (!page.entitySet) {
                entityType = undefined;
            }
            else {
                const entitySet = oDataServiceAVT.entitySets && oDataServiceAVT.entitySets.find((es) => es.name === page.entitySet);
                entityType = entitySet && entitySet.entityType && entitySet.entityType.name;
            }
            if (page.config) {
                const schemaFile = utils_1.getSchemaFilePath(page.pageType, entityType);
                const config = page.config;
                if (this.schemas[schemaFile.filename]) {
                    config.$schema = schemaFile.path;
                }
                else {
                    const genericSchemaFile = utils_1.getSchemaFilePath(page.pageType);
                    config.$schema = genericSchemaFile.path;
                }
                pageConfigs[`${types_1.DirName.Pages}/${pageId}.json`] = config;
            }
        }
        // remove config before converting to JSON
        const app = JSON.parse(JSON.stringify(this.app));
        for (const pageId in app.pages) {
            delete app.pages[pageId].config;
        }
        appConfig[types_1.FileName.App] = app;
        return { appConfig, pageConfigs };
    }
}
exports.AppProvider = AppProvider;
//# sourceMappingURL=appProvider.js.map