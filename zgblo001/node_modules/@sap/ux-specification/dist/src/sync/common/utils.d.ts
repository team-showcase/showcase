import { AnnotationTerm, CollectionFacet, ConverterOutput, DataFieldAbstractTypes, ReferenceFacet, ReferenceURLFacet } from '@sap-ux/vocabularies-types';
import { QualifiedName } from '@sap-ux/vocabularies-types/dist/generated/Common';
import { FioriElementsVersion, Manifest, PageType, PageTypeV4 } from '../../specification/common';
import { SchemaType } from '../../specification/schemaAccess';
import { AnnotationData, FacetConfig, FacetConfigs, FacetSection, SchemaFilePath } from './types';
export declare enum TemplateType {
    ListReportObjectPageV2 = "ListReportObjectPageV2",
    ListReportObjectPageV4 = "ListReportObjectPageV4",
    OverviewPageV2 = "OverviewPageV2",
    AnalyticalListPageV2 = "AnalyticalListPageV2",
    AnalyticalListPageV4 = "AnalyticalListPageV4"
}
/**
 * Parses, merges, and converts a list of annotation files with aid of tools from annotation-vocabularies-tools
 * @param annotationFiles - The list of all annotation files, in JSON format
 * @returns the complete service information
 */
export declare function parseAndMergeAndConvert(annotationFiles: AnnotationData[]): ConverterOutput;
export declare const getAnnotationPropertyValue: (annotationProperty: any) => string;
/**
 * Return the page type for a given V2 page in manifest
 * @param name - page component name
 */
export declare function getPageTypeV2(name: any): PageType;
/**
 * Return the page type for a given V4 page in manifest
 * @param name - page component name
 */
export declare function getPageTypeV4(name: any): PageType;
/**
 * Resolve page section(get key and label->description).
 * @param facetDefinition - the actual annotation record
 * @param keyForRelatedFacetKeys - construct key for 'keyForRelatedFacetKeys' property(used to define custom sections) - we should not add '@' symbol there.
 * @returns {FacetSection} - object comprising the relevant facet information
 */
export declare function getSectionFacet(facetDefinition: AnnotationTerm<CollectionFacet> | AnnotationTerm<ReferenceFacet> | AnnotationTerm<ReferenceURLFacet>, keyForRelatedFacetKeys?: boolean): FacetSection | undefined;
export declare const getManifestSectionByPathV4: (exportResultManifest: object, path: string, targetAnnotation?: string, targetAnnotationEncoded?: string) => object;
/**
 * Finds the alias for a given namespace in the references' section of the converted service metadata
 * @param {string} namespace - complete namespace, e.g. 'com.sap.vocabularies.UI.v1'
 * @param {ConverterOutput} oDataServiceAVT - combined service metadata, as returned by annotation vocabularies tools
 * @returns alias for the given namespace
 */
export declare function findAlias(namespace: string, oDataServiceAVT: ConverterOutput): string;
export declare function getSchemaKeyOfLineItemRecord(lineItemRecord: DataFieldAbstractTypes): string;
/**
 * Retrieve facet configurations that can be used to generate ObjectPage schemas
 * @param {QualifiedName} entityTypeName - the name of the actual entity type
 * @param {ConverterOutput} oDataServiceAVT - complete service information, as returned by annotation vocabularies tool
 */
export declare function getObjectPageFacets(entityTypeName: QualifiedName, oDataServiceAVT: ConverterOutput): FacetConfigs;
/**
 * Returns the version of Fiori elements (v2/v4) from a given manifest
 * @param manifest - the manifest.json file
 */
export declare function getVersionFromManifest(manifest: Manifest): FioriElementsVersion;
export declare function getTemplateTypeFromManifest(manifest: Manifest): TemplateType;
/**
 * Creates a default object for a new section or subsection, and adds the ID as title if present.
 * @param facet Facet configuration, to be analyzed
 * @returns the new section object
 */
export declare function createSectionWithoutProperties(facet?: FacetConfig): object;
/**
 * Retrieve page section data(so far id/key and label/description).
 * @param {QualifiedName} entityTypeName The actual entitySet (corresponds to the given page)
 * @param {ConverterOutput} oDataServiceAVT - complete service information, as returned by annotation vocabularies tool
 */
export declare function getObjectPageFacetSection(entityTypeName: QualifiedName, oDataServiceAVT: ConverterOutput): FacetSection[];
/**
 * Cleans empty sub-structures from the export result for manifest
 * @param manifest - manifest.json part of the export result
 * @param path  - path in the manifest
 * @param targetAnnotation - target annotation (optional, in case of sections, subsections)
 * @param targetAnnotationEncoded - encoded version of the target annotation, as represented in the manifest
 */
export declare const deleteEmptyStructure: (manifest: object, path: string, targetAnnotation?: string, targetAnnotationEncoded?: string) => void;
/**
 * Method which returns schema file name and path depending on passed schema or page type.
 * @param {SchemaType | PageType} schemaType Schema type or Page type.
 * @param {string} [entitySet] Entity set string.
 * @return {SchemaFilePath} File path info.
 */
export declare const getSchemaFilePath: (schemaType: PageType | PageTypeV4 | SchemaType, entitySet?: string) => SchemaFilePath;
/**
 * Method which generates id of page according to passed parameters.
 * @param appVersion - Fiori Elements version - V2 or V4.
 * @param pageType - Page type.
 * @param entitySet - Entity Set.
 * @param navigationProperty - Navigation property (optional).
 * @param viewId - Custom page's viewId (optional).
 * @returns {string} Generated page id
 */
export declare function generatePageId(appVersion: FioriElementsVersion, pageType: PageType | PageTypeV4, entitySet: string, navigationProperty?: string, viewId?: string): string;
