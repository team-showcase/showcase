"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
exports.reflectMetadataKey = Symbol('specificationMetadataKey');
exports.syncRule = (propSpec) => {
    return Reflect.metadata(exports.reflectMetadataKey, propSpec);
};
function getReflectMetadata(target, propertyName) {
    return Reflect.getMetadata(exports.reflectMetadataKey, target, propertyName);
}
exports.getReflectMetadata = getReflectMetadata;
exports.pageLayoutInformation = (pageInfo) => (constructor) => {
    constructor.prototype.pageLayoutInformation = pageInfo;
};
const childIdKey = Symbol('childId');
exports.childId = (id) => {
    return Reflect.metadata(childIdKey, id);
};
exports.getChildId = (target, propertyName) => {
    return Reflect.getMetadata(childIdKey, target, propertyName);
};
exports.getPageLayoutInformation = (target) => {
    return Object.getPrototypeOf(target).pageLayoutInformation;
};
/*
 * Validity decorator and functions for it
 */
exports.validityMetadataKey = Symbol('validityMetadataKey');
exports.validity = (propSpec) => {
    return Reflect.metadata(exports.validityMetadataKey, propSpec);
};
function getTextForDeprecated(key, validity) {
    let text = key + ' is deprecated';
    if (validity.deprecated) {
        text = validity.deprecated.since ? text + ' since ' + validity.deprecated.since : text;
        text = validity.deprecated.text ? text + '. ' + validity.deprecated.text : text;
    }
    return text;
}
exports.getTextForDeprecated = getTextForDeprecated;
//# sourceMappingURL=decorators.js.map