import { ControlTypeFunction } from '../types';
/**
 * General export rule, joining all given breadcrumbs to the base ID
 * @param baseId - base ID, first part of the stable ID
 * @param idBreadcrumbs - array of ID parts
 */
export declare const buildControlIdFromParent: (baseId: string, idBreadcrumbs: string[]) => string;
/**
 * Export rule for pages
 * @param baseId - base ID, first part of the stable ID
 * @param idBreadcrumbs - array of ID parts
 * @param breadcrumbs - array of breadcrumbs
 */
export declare const buildControlIdForPage: (baseId: string, idBreadcrumbs: string[], breadcrumbs: string[]) => string;
/**
 * Converts the section id to the right string for the stable id:
 * If the corresponsing facet has ID maintained, we must take this ID. If ID is not present, take the navigation path.
 * @param sectionId - old ID that shall get converted
 * @param breadcrumbs - array of breadcrumbs
 * @param title - title from JSON schema, comprising the facet ID
 */
export declare const convertSectionId: (sectionId: string, title: string) => string;
export declare function escapeId(sParam: string): string;
/**
 * Export rule  for table columns
 * @param baseId - base ID, first part of the stable ID
 * @param idBreadcrumbs - array of ID parts
 * @param breadcrumbs - array of breadcrumbs
 * @param controlType - controlType function of ecorators, not used here
 * @param title - title from JSON schema, comprising the facet ID
 */
export declare const buildColumnControlId: (baseId: string, idBreadcrumbs: string[], breadcrumbs: string[], controlType: ControlTypeFunction, title: string) => string;
export declare const addPatternForBindingChangeOfEnum: (schema: object, definition: object, propertyName: string) => void;
