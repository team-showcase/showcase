"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const v4_1 = require("../../../v4");
var Constants;
(function (Constants) {
    Constants["OptionalQuery"] = ":?query:";
    Constants["Component"] = "sap/fe/AppComponent";
    Constants["Namespace"] = "sap.fe.templates";
})(Constants = exports.Constants || (exports.Constants = {}));
/**
 * Transform Pages(from app.json) to UI5 routing configuration(manifest.json)
 * @param routing UI5 routing configuration
 */
const createRoute = (name, target, pattern) => {
    return {
        pattern,
        name,
        target
    };
};
/**
 * Method returns SapUi5RoutingTargetBase.options object.
 * @param {string} [entitySet] - Entity set.
 * @param {string} [variantManagement] - Variant management string.
 * @return {{settings: SapUi5RoutingTargetSettingsV4;}} Returns object for SapUi5RoutingTargetBase.options.
 */
const createTargetOption = (entitySet, variantManagement) => {
    return {
        settings: Object.assign(Object.assign(Object.assign({}, (entitySet && { entitySet })), (variantManagement && { variantManagement })), { navigation: {} })
    };
};
function initializeRouting(manifestRouting) {
    let routing = manifestRouting;
    if (!routing) {
        routing = {
            routes: [],
            targets: {}
        };
    }
    else {
        if (!routing.routes) {
            routing.routes = [];
        }
        if (!routing.targets) {
            routing.targets = {};
        }
    }
    return routing;
}
/**
 * Transform Pages(from app.json) to UI5 routing configuration(manifest.json)
 * @param routing UI5 routing configuration
 */
function transformRoutingV4(homePage, pages, manifest) {
    const routing = initializeRouting(manifest['sap.ui5'].routing);
    // add default route
    if (homePage && !routing.routes.some((route) => route.name === homePage)) {
        // Make sure there no route duplication
        routing.routes.push(createRoute(homePage, homePage, Constants.OptionalQuery));
    }
    for (const id in pages) {
        let target;
        const page = pages[id];
        if (page.pageType !== v4_1.PageTypeV4.CustomPage) {
            target = {
                type: 'Component',
                id,
                name: `${Constants.Namespace}.${pages[id].pageType}`
            };
        }
        else if (page.view) {
            target = Object.assign(Object.assign({ viewId: page.view.id, viewName: page.view.name }, (page.view.viewLevel && { viewLevel: page.view.viewLevel })), (page.view.title && { title: page.view.title }));
        }
        if (page.entitySet) {
            target.options = createTargetOption(page.entitySet, page.variantManagement);
        }
        if (page.navigation) {
            for (const association in page.navigation) {
                let pattern = '';
                const parts = page.navigation[association].split('.');
                const pageType = pages[association] && pages[association].pageType;
                parts.forEach((part, index) => {
                    let key = '';
                    if (pageType !== v4_1.PageTypeV4.ListReport) {
                        // Keys should be like - 'key', 'key2', 'key3'
                        key = `({key${index ? index + 1 : ''}})`;
                    }
                    pattern += `${pattern ? '/' : ''}${part}${key}`;
                });
                // Handle list report page different as there can be duplicate last part
                let navigationKey = parts[parts.length - 1];
                if (pageType === v4_1.PageTypeV4.ListReport ||
                    (pageType === v4_1.PageTypeV4.CustomPage && !pages[association].entitySet && !navigationKey)) {
                    navigationKey = association;
                }
                if (navigationKey) {
                    if (!target.options) {
                        target.options = createTargetOption();
                    }
                    target.options.settings.navigation[navigationKey] = {
                        detail: {
                            route: association
                        }
                    };
                }
                if (!routing.routes.some((route) => route.name === association)) {
                    // Make sure there no route duplication
                    routing.routes.push(createRoute(association, association, `${pattern}${Constants.OptionalQuery}`));
                }
            }
        }
        // Update associated route with layout information
        const route = routing.routes.find((route) => route.name === id);
        if (route) {
            if (page.defaultLayoutType) {
                route.layout = page.defaultLayoutType;
            }
            else {
                delete route.layout;
            }
        }
        routing.targets[id] = target;
    }
    // Remove deleted pages
    for (const id in routing.targets) {
        if (!pages || !pages[id]) {
            // Remove target
            delete routing.targets[id];
            // Remove routes
            const index = routing.routes.findIndex((route) => route.name === id);
            if (index !== -1) {
                routing.routes.splice(index, 1);
            }
        }
    }
    return routing;
}
exports.transformRoutingV4 = transformRoutingV4;
//# sourceMappingURL=manifest.js.map