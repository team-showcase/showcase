"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../common");
/**
 * Method adds definition for 'RelatedFacetKeys' as enum with describtion and adds references to 'RelatedFacetKeys' for custom section definitions.
 * @param {object} schema App specific schema that potentially gets enhanced
 * @param {string[]} sectionDefinitions array of section definitions which should be updated with new reference to 'RelatedFacetKeys' enum.
 * @param {FacetSection[]} facetSections Array of facet section objects which is used to generate enum values.
 */
function addDefinitionForRelatedFacetKeys(schema, sectionDefinitions, facetSections) {
    // Create new definition in schema as 'oneOf'.
    // Simpler way would be to use 'enum', but then there no option to pass description.
    schema['definitions']['RelatedFacetKeys'] = {
        type: 'string',
        oneOf: facetSections.map((section) => {
            const schemaIdForSection = section.ID ? section.ID : section.label ? section.label : section.key;
            return Object.assign(Object.assign({ const: schemaIdForSection }, (section.label && { description: section.label })), (section.custom && { custom: section.custom }));
        })
    };
    // Add enum definition
    for (const name of sectionDefinitions) {
        const definition = schema['definitions'][name];
        const property = definition['properties']['relatedFacet'];
        definition['properties']['relatedFacet'] = {
            anyOf: [
                {
                    $ref: '#/definitions/RelatedFacetKeys'
                },
                property
            ]
        };
    }
}
function addSection(facet, facetKey, sections) {
    const schemaIdForSection = facet.ID ? facet.ID : facet.Label ? facet.Label : facetKey;
    if (facet.base === 'CollectionFacet') {
        //handle collection facets
        sections['properties'][schemaIdForSection] = common_1.createSectionWithoutProperties(facet);
        sections['properties'][schemaIdForSection].properties = {
            subsections: {
                additionalProperties: false,
                type: 'object',
                properties: {}
            }
        };
        const subSections = sections['properties'][schemaIdForSection].properties.subsections;
        for (const key in facet['facets']) {
            addSection(facet['facets'][key], key, subSections);
        }
    }
    else if (facet.base === 'LineItemFacet') {
        sections['properties'][schemaIdForSection] = {
            $ref: '#/definitions/ObjectPageSection'
        };
    }
    else {
        sections['properties'][schemaIdForSection] = common_1.createSectionWithoutProperties(facet);
    }
}
/**
 * Derives the sections from the UI.Facets annotation and adds them to the schema
 * @param {object} appSchema - application specific JSON schema
 * @param {string} entityTypeName - current entity type
 * @param pages {SapUiAppPageV4[]} - list of (manifest) pages
 * @param {ConverterOutput} oDataServiceAVT - complete service information, as returned by annotation vocabularies tool
 */
function addSections(appSchema, entityTypeName, entitySetName, pages, oDataServiceAVT) {
    if (!pages) {
        delete appSchema['definitions']['ObjectPageSubSections'];
        return;
    }
    // Get facet annotations
    const facets = common_1.getObjectPageFacets(entityTypeName, oDataServiceAVT);
    if (!facets) {
        delete appSchema['definitions']['ObjectPageSubSections'];
        return;
    }
    const sections = appSchema['definitions']['Sections'];
    Object.keys(pages).forEach((element) => {
        if (pages[element].options &&
            pages[element].options.settings &&
            pages[element].options.settings.entitySet === entitySetName &&
            pages[element].name === 'sap.fe.templates.ObjectPage') {
            for (const facetKey in facets) {
                const facet = facets[facetKey];
                addSection(facet, facetKey, sections);
            }
        }
    });
    // Custom sections as part of sections
    if (appSchema['definitions']['CustomSections']) {
        sections.properties = Object.assign(Object.assign({}, sections.properties), appSchema['definitions']['CustomSections'].properties);
    }
}
/**
 * Adds the related facets keys 'enum' to the app schema
 * @param {object} schema - app specific schema that potentially gets enhanced
 * @param {string} entityTypeName - current entity type
 * @param {string} entitySetName - entity set of the actual (object) page
 * @param {SapUiAppPageV4[]} pages - list of all pages
 * @param {ConverterOutput} oDataServiceAVT - complete service information, as returned by annotation vocabularies tool
 */
function addRelatedFacetKeysType(schema, entityTypeName, entitySetName, pages, oDataServiceAVT) {
    Object.keys(pages).forEach((element) => {
        if (pages[element].options &&
            pages[element].options.settings &&
            pages[element].options.settings.entitySet === entitySetName &&
            pages[element].name === 'sap.fe.templates.ObjectPage') {
            // Find sections from annotation
            const facetSections = common_1.getObjectPageFacetSection(entityTypeName, oDataServiceAVT);
            // Find custom sections ids from manifest
            const page = pages[element];
            if (page.options &&
                page.options.settings &&
                page.options.settings.content &&
                page.options.settings.content.body &&
                page.options.settings.content.body.sections) {
                Object.keys(page.options.settings.content.body.sections).forEach(function (key) {
                    // Just in case - avoid duplications
                    if (!facetSections.find((section) => section.key === key)) {
                        facetSections.push({
                            key,
                            custom: true
                        });
                    }
                });
            }
            // Update schema definition
            addDefinitionForRelatedFacetKeys(schema, ['ObjectPageCustomSectionFragment'], facetSections);
        }
    });
}
function generateObjectPageSchemaV4(genericSchema, entityTypeName, oDataServiceAVT, manifest) {
    const appSchema = JSON.parse(JSON.stringify(genericSchema));
    // Eliminate generic definitions
    delete appSchema['definitions']['GenericSections'];
    delete appSchema['definitions']['ObjectPageSubSections'];
    // Change reference to generated sections
    appSchema['properties']['sections'] = {
        $ref: '#/definitions/Sections'
    };
    //initialize sections
    appSchema['definitions']['Sections'] = {
        type: 'object',
        properties: {},
        additionalProperties: false
    };
    const entitySet = oDataServiceAVT.entitySets.find((es) => es.entityType.name === entityTypeName);
    if (entitySet) {
        // Add sections
        addSections(appSchema, entityTypeName, entitySet.name, manifest['sap.ui5'].routing.targets, oDataServiceAVT);
        // Custom Section facets
        addRelatedFacetKeysType(appSchema, entityTypeName, entitySet.name, manifest['sap.ui5'].routing.targets, oDataServiceAVT);
    }
    return appSchema;
}
exports.generateObjectPageSchemaV4 = generateObjectPageSchemaV4;
//# sourceMappingURL=objectPage.js.map