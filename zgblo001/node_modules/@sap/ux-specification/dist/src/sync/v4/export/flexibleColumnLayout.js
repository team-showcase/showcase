"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const v4_1 = require("../../../specification/v4");
const manifest_1 = require("./manifest");
const utils_1 = require("./utils");
// Aggregations mapping for target levels
// 0 - BeginColumnPages, 1 - MidColumnPages, 2 - EndColumnPages
const fclAggregations = [
    v4_1.FlexibleColumnLayoutAggregations.BeginColumnPages,
    v4_1.FlexibleColumnLayoutAggregations.MidColumnPages,
    v4_1.FlexibleColumnLayoutAggregations.EndColumnPages
];
/**
 * Recursive method which updates manifest routing to enable FCL support.
 * Method contains some parts like setting 'ThreeColumnsEndExpanded' to 2st->3rd page navigation - it was requested for demo purposes.
 * @param {SapUi5} manifestUI5 - SAPUI5 manifest data.
 * @param {Application} app - Project application.
 * @param {string} pageName - Page name which should be used to apply FCL.
 * @param {Array<string>} targetPages - Current array of target pages to join in.
 * For example to display two column FCL we have - ['1stLevelPage', '2ndLevelPage']
 * @param {number} level - Current navigation level.
 */
const applyFCLRouting = (manifestUI5, app, pageName, targetPages = [], level = 0) => {
    const page = app.pages[pageName];
    const route = manifestUI5.routing.routes.find((route) => {
        return route.name === pageName;
    });
    // Update route
    if (typeof route.target === 'string') {
        // 1-3 level navigation is placed like [`1st Page`, `2nd Page`, `3rd Page`]
        // 4+ level navigation is placed as fullscreen - [`4th+n Page`]
        route.target = level <= 2 ? [...targetPages, route.target] : [route.target];
    }
    // Update target
    const target = manifestUI5.routing.targets[pageName];
    target.controlAggregation =
        'controlAggregation' in page
            ? page.controlAggregation
            : fclAggregations[level]
                ? fclAggregations[level]
                : v4_1.FlexibleColumnLayoutAggregations.EndColumnPages;
    const pattern = route.pattern.replace(manifest_1.Constants.OptionalQuery, '');
    target.contextPattern = pattern ? `/${pattern}` : '';
    // Loop further pages
    if (page.navigation) {
        level++;
        for (const pageId in page.navigation) {
            applyFCLRouting(manifestUI5, app, pageId, route.target, level);
        }
    }
};
/**
 * Method enables FCL support by updating Manifest.
 * @param {SapUi5} manifestUI5 - SAPUI5 manifest data.
 * @param {Application} app - Project application.
 */
const enableFcl = (manifestUI5, app) => {
    // Apply FCL
    if (!manifestUI5.routing.config) {
        manifestUI5.routing.config = {};
    }
    // Apply config with router class
    manifestUI5.routing.config.routerClass = v4_1.FIORI_FCL_ROUTER_CLASS;
    // Make changes in
    applyFCLRouting(manifestUI5, app, app.home);
    // Update 'rootView'
    const rootView = {
        viewName: v4_1.FIORI_FCL_ROOT_VIEW_NAME,
        type: v4_1.ViewTypes.XML,
        async: true,
        id: v4_1.FIORI_FCL_ROOT_ID
    };
    manifestUI5.rootView = manifestUI5.rootView ? Object.assign(Object.assign({}, manifestUI5.rootView), rootView) : rootView;
    // Added in scope of #523. Starting from SAPUI5 1.83+ - we need make sure that dependency to `sap.f` library is added to manifest.
    utils_1.updateDependencyLib(manifestUI5, v4_1.SAPUI5_DEPENDENCY_LIB_SAP_F);
};
/**
 * Method disables FCL support by updating Manifest.
 * @param {SapUi5} manifestUI5 - SAPUI5 manifest data.
 */
const disableFcl = (sapui5) => {
    if (sapui5.rootView && sapui5.rootView.viewName === v4_1.FIORI_FCL_ROOT_VIEW_NAME) {
        // FCL is disabled and rootview name is equal to FCL ROOT VIEW, then remove rootview
        delete sapui5.rootView;
    }
    if (sapui5.routing.config && sapui5.routing.config.routerClass === v4_1.FIORI_FCL_ROUTER_CLASS) {
        // Remove routing class
        delete sapui5.routing.config.routerClass;
    }
};
/**
 * Method updates Manifest depending on is FCL ON or OFF.
 * @param {SapUi5} manifestUI5 - SAPUI5 manifest data.
 * @param {Application} app - Project application.
 */
exports.updateFcl = (manifestUI5, app) => {
    if (app.settings && app.settings.flexibleColumnLayout) {
        enableFcl(manifestUI5, app);
    }
    else {
        disableFcl(manifestUI5);
    }
};
//# sourceMappingURL=flexibleColumnLayout.js.map