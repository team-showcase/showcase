"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const controls_1 = require("../../export/controls");
const ObjectPage_1 = require("../../export/pages/ObjectPage");
const index_1 = require("../common/index");
/**
 * Fills the sections and subsections of the configuration (recursive function)
 * @param sectionProperties - current properties' list (of sections or subsections)
 * @param manifestSettings - object page settings section of the manifest
 * @param configPart - the given part of the object page config
 * @param manifest - manifest.json of the app
 * @param jsonSchema - app specific schema
 * @param v4Page - current (object) page
 */
function fillSections(sectionProperties, manifestSettings, configPart, manifest, jsonSchema, v4Page) {
    for (const sectionId in sectionProperties) {
        const schemaSection = sectionProperties[sectionId];
        if (schemaSection['$ref'] === '#/definitions/ObjectPageSection') {
            // Section without subsections
            const manifestSection = manifestSettings.controlConfiguration[sectionId];
            if (manifestSection && manifestSection['tableSettings']) {
                // Data needs to be transferred
                configPart[sectionId] = { table: new controls_1.ObjectPageTable() };
                index_1.transferSettingsOfObject(configPart[sectionId].table, manifest, jsonSchema['definitions']['TableSettings'], v4Page.id, sectionId);
            }
        }
        else if (schemaSection['properties'] && schemaSection['properties']['subsections']) {
            configPart[sectionId] = {
                subsections: {}
            };
            fillSections(schemaSection['properties']['subsections']['properties'], manifestSettings, configPart[sectionId]['subsections'], manifest, jsonSchema, v4Page);
        }
    }
}
/**
 * Fills the object page config from the given manifest
 * @param objectPageConfig - the object page config
 * @param manifest - manifest.json of the app
 * @param v4Page - current (object) page
 * @param jsonSchema - app specific schema
 */
function fillConfig(objectPageConfig, manifest, v4Page, jsonSchema) {
    // Transfer header information
    objectPageConfig.header = new controls_1.ObjectPageHeader();
    index_1.transferSettingsOfObject(objectPageConfig.header, manifest, jsonSchema['definitions']['ObjectPageHeader'], v4Page.id);
    index_1.transferSettingsOfObject(objectPageConfig, manifest, jsonSchema['properties'], v4Page.id);
    if (!objectPageConfig.sections) {
        objectPageConfig.sections = {};
    }
    const manifestSettings = v4Page.options.settings;
    if (manifestSettings) {
        if (manifestSettings.controlConfiguration && jsonSchema['definitions']['Sections']) {
            // Fill sections and subsections
            objectPageConfig.sections = {};
            fillSections(jsonSchema['definitions']['Sections'].properties, manifestSettings, objectPageConfig.sections, manifest, jsonSchema, v4Page);
        }
        // Fill Custom sections
        const customSections = manifestSettings.content && manifestSettings.content.body && manifestSettings.content.body.sections;
        if (customSections) {
            objectPageConfig.sections.custom = [];
            for (const sectionId in customSections) {
                const section = new controls_1.ObjectPageCustomSectionFragment();
                index_1.transferSettingsOfObject(section, manifest, jsonSchema['definitions']['ObjectPageCustomSectionFragment'], v4Page.id, sectionId);
                objectPageConfig.sections.custom.push(section);
            }
        }
    }
}
/**
 * External API: Create configuration (file content) for a V4 object page
 * @param {object} manifest - manifest of the app
 * @param {object} jsonSchema - app specific JSON schema
 * @param {string} routingId - current routing ID of the manifest, identifying the given page
 * @returns config - the object page configuration
 */
function createObjectPageConfig(manifest, jsonSchema, routingId) {
    const v4Pages = manifest['sap.ui5']['routing']['targets'];
    const v4Page = v4Pages[routingId];
    const config = new ObjectPage_1.ObjectPage();
    if (v4Page) {
        fillConfig(config, manifest, v4Page, jsonSchema);
    }
    return config;
}
exports.createObjectPageConfig = createObjectPageConfig;
//# sourceMappingURL=objectPage.js.map