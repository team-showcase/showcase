"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
/**
 * Generates an app specific schema out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 *
 * @param genericSchema - generic JSON schema of a list report
 * @param entityTypeName - the base entity type of the given page
 * @param entityTypes - list of all entity types
 */
function generateListReportSchemaV2(genericSchema, entityTypeName, entityTypes) {
    const appSchema = JSON.parse(JSON.stringify(genericSchema));
    appSchema['properties']['table']['anyOf']['0']['$ref'] = '#/definitions/ResponsiveTableWithMultiSelect<LineItems>';
    appSchema['properties']['table']['anyOf']['1']['$ref'] = '#/definitions/ResponsiveTableWithInlineDelete<LineItems>';
    appSchema['properties']['table']['anyOf']['2']['$ref'] = '#/definitions/TreeTable<LineItems>';
    appSchema['properties']['table']['anyOf']['3']['$ref'] = '#/definitions/AnalyticalTable<LineItems>';
    appSchema['properties']['table']['anyOf']['4']['$ref'] = '#/definitions/GridTable<LineItems>';
    const responsiveTableMultiSelect = JSON.parse(JSON.stringify(appSchema['definitions']['ResponsiveTableWithMultiSelect<GenericColumns>']));
    const responsiveTableInlineDelete = JSON.parse(JSON.stringify(appSchema['definitions']['ResponsiveTableWithInlineDelete<GenericColumns>']));
    const treeTableDefinition = JSON.parse(JSON.stringify(appSchema['definitions']['TreeTable<GenericColumns>']));
    const analyticalTableDefinition = JSON.parse(JSON.stringify(appSchema['definitions']['AnalyticalTable<GenericColumns>']));
    const gridTableDefinition = JSON.parse(JSON.stringify(appSchema['definitions']['TreeTable<GenericColumns>']));
    responsiveTableMultiSelect['properties']['columns'] = {
        $ref: '#/definitions/LineItems'
    };
    responsiveTableInlineDelete['properties']['columns'] = {
        $ref: '#/definitions/LineItems'
    };
    treeTableDefinition['properties']['columns'] = {
        $ref: '#/definitions/LineItems'
    };
    analyticalTableDefinition['properties']['columns'] = {
        $ref: '#/definitions/LineItems'
    };
    gridTableDefinition['properties']['columns'] = {
        $ref: '#/definitions/LineItems'
    };
    appSchema['definitions']['ResponsiveTableWithMultiSelect<LineItems>'] = responsiveTableMultiSelect;
    appSchema['definitions']['ResponsiveTableWithInlineDelete<LineItems>'] = responsiveTableInlineDelete;
    appSchema['definitions']['TreeTable<LineItems>'] = treeTableDefinition;
    appSchema['definitions']['AnalyticalTable<LineItems>'] = analyticalTableDefinition;
    appSchema['definitions']['GridTable<LineItems>'] = gridTableDefinition;
    delete appSchema['definitions']['ResponsiveTableWithMultiSelect<GenericColumns>'];
    delete appSchema['definitions']['ResponsiveTableWithInlineDelete<GenericColumns>'];
    delete appSchema['definitions']['TreeTable<GenericColumns>'];
    delete appSchema['definitions']['AnalyticalTable<GenericColumns>'];
    delete appSchema['definitions']['GridTable<GenericColumns>'];
    delete appSchema['definitions']['GenericColumns'];
    const entityType = entityTypes.find((et) => et.name === entityTypeName);
    const lineItemAnnotation = entityType.annotations && entityType.annotations.UI && entityType.annotations.UI.LineItem;
    utils_1.addLineItemsType(appSchema, lineItemAnnotation, entityType);
    utils_1.checkGenerateRules(appSchema);
    return appSchema;
}
exports.generateListReportSchemaV2 = generateListReportSchemaV2;
//# sourceMappingURL=listReport.js.map