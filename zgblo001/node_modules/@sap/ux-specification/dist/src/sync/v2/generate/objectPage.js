"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../common");
const utils_1 = require("./utils");
/**
 * Method adds definition for 'RelatedFacetKeys' as enum with describtion and adds references to 'RelatedFacetKeys' for custom section definitions.
 * @param {object} schema App specific schema that potentially gets enhanced
 * @param {string[]>} sectionDefinitions array of section definitions which should be updated with new reference to 'RelatedFacetKeys' enum.
 * @param {FacetSection[]} facetSections Array of facet section objects which is used to generate enum values.
 */
function addDefinitionForRelatedFacetKeys(schema, sectionDefinitions, facetSections) {
    // Create new definition in schema as 'oneOf'.
    // Simpler way would be to use 'enum', but then there no option to pass description.
    schema['definitions']['RelatedFacetKeys'] = {
        type: 'string',
        oneOf: facetSections.map((section) => {
            const schemaIdForSection = section.ID ? section.ID : section.key;
            return Object.assign(Object.assign({ const: schemaIdForSection }, (section.label && { description: section.label })), (section.custom && { custom: section.custom }));
        })
    };
    // Add enum definition
    for (const name of sectionDefinitions) {
        const definition = schema['definitions'][name];
        const property = definition['properties']['relatedFacet'];
        definition['properties']['relatedFacet'] = {
            anyOf: [
                {
                    $ref: '#/definitions/RelatedFacetKeys'
                },
                property
            ]
        };
    }
}
/**
 * Adds definitions for line items in object page sections tp the app schema
 * @param facetId - key of the facet, as listed in FacetConfigs
 * @param appSchema - app schema in general
 * @param facet - the given facet from the UI annotations
 * @param facets - list of all facets
 */
function handleLineItem(facetId, appSchema, facet, facets) {
    if (facet.base !== 'LineItemFacet' || !facetId) {
        //no properties
        return;
    }
    const navigationProperty = facetId.split('::')[0];
    const schemaIdForOpSection = 'ObjectPageSectionTableV2<' + facetId + '>';
    appSchema['definitions'][schemaIdForOpSection] = {
        type: 'object',
        properties: {
            table: {
                anyOf: [
                    {
                        $ref: '#/definitions/ObjectPageResponsiveTableWithMultiSelect<' + facetId + '>'
                    },
                    {
                        $ref: '#/definitions/ObjectPageResponsiveTableWithInlineDelete<' + facetId + '>'
                    },
                    {
                        $ref: '#/definitions/ObjectPageAnalyticalTable<' + facetId + '>'
                    },
                    {
                        $ref: '#/definitions/ObjectPageGridTable<' + facetId + '>'
                    },
                    {
                        $ref: '#/definitions/ObjectPageTreeTable<' + facetId + '>'
                    }
                ]
            }
        },
        additionalProperties: false
    };
    if (facet.ID !== undefined) {
        appSchema['definitions'][schemaIdForOpSection].title = common_1.FacetTitlePrefix + facet.ID;
    }
    const schemaIdForOpResponsibleTableMultiSelect = 'ObjectPageResponsiveTableWithMultiSelect<' + facetId + '>';
    const schemaIdForOpResponsibleTableInlineDelete = 'ObjectPageResponsiveTableWithInlineDelete<' + facetId + '>';
    const schemaIdForOpAnalyticalTable = 'ObjectPageAnalyticalTable<' + facetId + '>';
    const schemaIdForOpGridTable = 'ObjectPageGridTable<' + facetId + '>';
    const schemaIdForOpTreeTable = 'ObjectPageTreeTable<' + facetId + '>';
    appSchema['definitions'][schemaIdForOpResponsibleTableMultiSelect] = JSON.parse(JSON.stringify(appSchema['definitions']['ObjectPageResponsiveTableWithMultiSelect<GenericColumns>']));
    appSchema['definitions'][schemaIdForOpResponsibleTableMultiSelect]['properties']['columns']['$ref'] =
        '#/definitions/' + facetId;
    appSchema['definitions'][schemaIdForOpResponsibleTableInlineDelete] = JSON.parse(JSON.stringify(appSchema['definitions']['ObjectPageResponsiveTableWithInlineDelete<GenericColumns>']));
    appSchema['definitions'][schemaIdForOpResponsibleTableInlineDelete]['properties']['columns']['$ref'] =
        '#/definitions/' + facetId;
    appSchema['definitions'][schemaIdForOpAnalyticalTable] = JSON.parse(JSON.stringify(appSchema['definitions']['ObjectPageAnalyticalTable<GenericColumns>']));
    appSchema['definitions'][schemaIdForOpAnalyticalTable]['properties']['columns']['$ref'] =
        '#/definitions/' + facetId;
    appSchema['definitions'][schemaIdForOpGridTable] = JSON.parse(JSON.stringify(appSchema['definitions']['ObjectPageGridTable<GenericColumns>']));
    appSchema['definitions'][schemaIdForOpGridTable]['properties']['columns']['$ref'] = '#/definitions/' + facetId;
    appSchema['definitions'][schemaIdForOpTreeTable] = JSON.parse(JSON.stringify(appSchema['definitions']['ObjectPageTreeTable<GenericColumns>']));
    appSchema['definitions'][schemaIdForOpTreeTable]['properties']['columns']['$ref'] = '#/definitions/' + facetId;
    for (const facetKey in facets) {
        if (facets[facetKey].base === 'LineItemFacet' && facetKey.includes(navigationProperty)) {
            utils_1.addLineItemsType(appSchema, facets[facetKey]['lineItem'], facets[facetKey]['entityType'], facetId);
        }
    }
}
function addSection(facets, facetKey, sections, appSchema) {
    const facet = facets[facetKey];
    if (facet.base === 'CollectionFacet') {
        //handle collection facets
        const schemaIdForSection = facetKey.replace('@com.sap.vocabularies.UI.v1.Facets', facet.base);
        sections['properties'][schemaIdForSection] = common_1.createSectionWithoutProperties(facet);
        const collectionDefinition = 'ObjectPageSectionTableV2<' + schemaIdForSection + '>';
        sections['properties'][schemaIdForSection].properties = {
            subsections: {
                $ref: '#/definitions/' + collectionDefinition
            }
        };
        appSchema['definitions'][collectionDefinition] = common_1.createSectionWithoutProperties();
        for (const key in facet['facets']) {
            addSection(facet['facets'], key, appSchema['definitions'][collectionDefinition], appSchema);
        }
    }
    else if (facet.base === 'LineItemFacet') {
        //handle reference facet (if comprising line item)
        sections['properties'][facetKey] = {
            $ref: '#/definitions/ObjectPageSectionTableV2<' + facetKey + '>'
        };
        handleLineItem(facetKey, appSchema, facet, facets);
    }
    else if (facet.base === 'ChartFacet') {
        //handle reference facet (if comprising chart)
        const chartSettings = appSchema['definitions']['GenericSections']['additionalProperties']['anyOf'].find((element) => element['$ref'] === '#/definitions/ObjectPageSectionChartV2');
        sections['properties'][facetKey] = chartSettings;
        if (facet.ID !== undefined) {
            appSchema['definitions']['ObjectPageSectionChartV2'].title = common_1.FacetTitlePrefix + facet.ID;
        }
    }
    else {
        // Other facets -> no properties
        sections['properties'][facetKey] = common_1.createSectionWithoutProperties(facet);
    }
}
/**
 * Adds the sections to the app schema
 * @param {object} appSchema - app specific schema that potentially gets enhanced
 * @param {string} entityTypeName - current entity type
 * @param {SapUiAppPagesV2} pages - list of (manifest) pages
 * @param {ConverterOutput} oDataServiceAVT - complete service information, as returned by annotation vocabularies tool
 */
function addSections(appSchema, entityTypeName, entitySetName, pages, oDataServiceAVT) {
    //initialize sections
    const sections = (appSchema['definitions']['Sections'] = {
        type: 'object',
        properties: {},
        additionalProperties: false
    });
    if (!pages) {
        return;
    }
    // Get facet annotations
    const facets = common_1.getObjectPageFacets(entityTypeName, oDataServiceAVT);
    if (!facets || Object.keys(facets).length === 0) {
        return;
    }
    // Loop on all pages, look for the right entity set
    for (const key in pages) {
        const element = pages[key];
        if (entitySetName.includes(element.entitySet)) {
            // Loop on all facets (of the given entitySet)
            for (const facetKey in facets) {
                addSection(facets, facetKey, sections, appSchema);
            }
        }
        else {
            addSections(appSchema, entityTypeName, entitySetName, element.pages, oDataServiceAVT);
        }
    }
    // Add custom sections
    for (const name in appSchema['definitions']['CustomSections'].properties) {
        sections.properties[name] = appSchema['definitions']['CustomSections'].properties[name];
    }
}
/**
 * Add Object Page Header Action Buttons to app-specific schema
 *
 * @param {object} appSchema Schema of the app
 * @param {string} entityTypeName - current entity type
 * @param {EntityType[]} entityTypes
 */
function addHeaderActions(appSchema, entityTypeName, oDataServiceAVT) {
    appSchema['definitions']['ObjectPageHeader'] = JSON.parse(JSON.stringify(appSchema['definitions']['ObjectPageHeader<GenericActions>']));
    delete appSchema['definitions']['ObjectPageHeader']['properties']['actions'];
    const entityType = oDataServiceAVT.entityTypes.find((et) => et.name === entityTypeName);
    if (!entityType) {
        return;
    }
    const alias = common_1.findAlias('com.sap.vocabularies.UI.v1', oDataServiceAVT);
    const actionAnnotation = alias &&
        entityType.annotations &&
        entityType.annotations[alias] &&
        entityType.annotations[alias].Identification;
    if (actionAnnotation) {
        // Add action to configuration
        appSchema['definitions']['ObjectPageHeader'].properties['actions'] = {
            $ref: '#/definitions/HeaderActions'
        };
        const headerActions = (appSchema['definitions']['HeaderActions'] = {
            type: 'object',
            properties: {},
            additionalProperties: false
        });
        actionAnnotation.forEach((item) => {
            if (!item['Determining'] && item.$Type === 'com.sap.vocabularies.UI.v1.DataFieldForAction') {
                const actionName = item.Action.split('.')[1].split('/');
                const entityName = entityType.fullyQualifiedName.split('.');
                const actionId = entityName[0] + '.' + actionName[0] + '::' + actionName[1];
                headerActions.properties[actionId] = {
                    $ref: '#/definitions/HeaderAction'
                };
            }
        });
    }
}
/**
 * Adds the related facets keys 'enum' to the app schema
 * @param schema - app specific schema that potentially gets enhanced
 * @param entityType - current entity type
 * @param {ConverterOutput} oDataServiceAVT - complete service information, as returned by annotation vocabularies tool
 */
function addRelatedFacetKeysType(schema, entityType, oDataServiceAVT) {
    // Find sections from annotation
    // And create new definition in schema as enum with description
    const facetSections = common_1.getObjectPageFacetSection(entityType, oDataServiceAVT);
    if (facetSections) {
        addDefinitionForRelatedFacetKeys(schema, ['ObjectPageCustomSectionFragment', 'ObjectPageCustomSectionView'], facetSections);
    }
}
/**
 * Generates an app specific schema out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 *
 * @param genericSchema - generic JSON schema of an object page
 * @param entityTypeName - the base entity type of the given page
 * @param annotations - list of all annotation files (file content plus URI as identifier)
 * @param {ConverterOutput} oDataServiceAVT - complete service information, as returned by annotation vocabularies tool
 * @param manifest - manifest.json of the app
 *
 * @returns the app specific JSON schema
 */
function generateObjectPageSchemaV2(genericSchema, entityTypeName, oDataServiceAVT, manifest) {
    const appSchema = JSON.parse(JSON.stringify(genericSchema));
    // Custom sections as part of sections
    const additionalSections = {};
    for (const name in appSchema['definitions']['CustomSections'].properties) {
        additionalSections[name] = appSchema['definitions']['CustomSections'].properties[name];
    }
    // Change reference to generated sections
    appSchema['properties']['sections'] = {
        $ref: '#/definitions/Sections'
    };
    // Change reference to header actions
    appSchema['properties']['header'] = {
        $ref: '#/definitions/ObjectPageHeader'
    };
    const entitySet = oDataServiceAVT.entitySets &&
        oDataServiceAVT.entitySets.find((es) => es.entityType.name === entityTypeName || es.name === entityTypeName);
    // Add sections
    if (entitySet) {
        addSections(appSchema, entityTypeName, entitySet.name, manifest['sap.ui.generic.app'].pages, oDataServiceAVT);
        delete appSchema['definitions']['ObjectPageTable<GenericColumns>'];
        // Add header actions
        addHeaderActions(appSchema, entityTypeName, oDataServiceAVT);
        delete appSchema['definitions']['GenericActions'];
        delete appSchema['definitions']['ObjectPageHeader<GenericActions>'];
        // Custom section facets
        addRelatedFacetKeysType(appSchema, entityTypeName, oDataServiceAVT);
    }
    // Eliminate generic Sections
    delete appSchema['definitions']['GenericSections'];
    delete appSchema['definitions']['ObjectPageSectionTableV2<GenericColumns>'];
    delete appSchema['definitions']['GenericColumns'];
    delete appSchema['definitions']['ObjectPageSubSections'];
    delete appSchema['definitions']['ObjectPageResponsiveTableWithMultiSelect<GenericColumns>'];
    delete appSchema['definitions']['ObjectPageResponsiveTableWithInlineDelete<GenericColumns>'];
    delete appSchema['definitions']['ObjectPageAnalyticalTable<GenericColumns>'];
    delete appSchema['definitions']['ObjectPageTreeTable<GenericColumns>'];
    delete appSchema['definitions']['ObjectPageGridTable<GenericColumns>'];
    if (!appSchema['definitions']['Sections']) {
        if (appSchema['definitions']['RelatedFacetKeys'] &&
            appSchema['definitions']['RelatedFacetKeys']['oneOf'].length) {
            // If related facets exists - then we need sections definition
            appSchema['definitions']['Sections'] = {
                type: 'object',
                properties: additionalSections,
                additionalProperties: false
            };
        }
        else {
            delete appSchema['properties']['sections'];
        }
    }
    utils_1.checkGenerateRules(appSchema);
    return appSchema;
}
exports.generateObjectPageSchemaV2 = generateObjectPageSchemaV2;
//# sourceMappingURL=objectPage.js.map