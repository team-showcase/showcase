"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const table_1 = require("../controls/table");
const utils_1 = require("../utils");
const common_1 = require("../../../common");
const manifest_1 = require("../../export/manifest");
const controls_1 = require("../../export/controls");
const ObjectPage_1 = require("../../export/pages/ObjectPage");
const ObjectPageHeaderAction_1 = require("../../../../sync/v2/export/controls/ObjectPageHeaderAction");
const sapUiPageV2_1 = require("../.../../../../../specification/v2/webapp/manifest/sapUiPageV2");
/**
 * Prepares the list of flex changes
 * @param change - the flex change (UI Adaptation)
 * @returns {FlexChangesForTransfer} - list of prepared flex changes
 */
function prepareFlexChanges(changes, entitySet) {
    const result = {};
    changes.forEach((changeString) => {
        try {
            const change = common_1.parseChangeString(changeString);
            if (change.controlId.includes(sapUiPageV2_1.FE_TEMPLATE_V2_OBJECT_PAGE) && change.controlId.includes(entitySet)) {
                let selectorId = change.controlId.split('--')[1].replace(/:3a:3a/g, '::');
                const complexIdMatch = new RegExp('.+DataField.+:::sSmartTableId::.+');
                if (complexIdMatch.exec(selectorId) !== null) {
                    selectorId = selectorId.split('template:::TableColumn:::')[1];
                }
                const idParts = selectorId.split(':::');
                let id, facetID;
                if (idParts.length === 1) {
                    const lastIdParts = idParts[0].split('-');
                    id = lastIdParts[lastIdParts.length - 1];
                    if (idParts[0].indexOf('com.sap.vocabularies.UI.v1.LineItem') >= 0 ||
                        idParts[0].indexOf('UI.LineItem') >= 0 ||
                        idParts[0].indexOf('::Table') >= 0) {
                        facetID = lastIdParts[0]
                            .split('::Table')[0]
                            .split('::responsiveTable')[0]
                            .replace(/::/g, '/@');
                    }
                    else {
                        const idParts = id.split('::');
                        if (idParts.length > 1) {
                            facetID = idParts[0];
                            id = idParts[1];
                        }
                        else if (lastIdParts[0].indexOf('::') > -1) {
                            facetID = lastIdParts[0].split('::')[0];
                        }
                    }
                }
                else if (selectorId.indexOf('sSmartTableId') >= 0) {
                    id = selectorId;
                    for (let index = 0; index < idParts.length; index++) {
                        const element = idParts[index];
                        if (element.startsWith('sSmartTableId')) {
                            facetID = element
                                .split('sSmartTableId::')[1]
                                .split('::Table')[0]
                                .split('/responsiveTable')[0]
                                .replace('::com.sap.vocabularies.UI.v1.LineItem', '/@com.sap.vocabularies.UI.v1.LineItem');
                            break;
                        }
                    }
                }
                else {
                    facetID = idParts[0];
                    id = idParts[1];
                }
                selectorId = selectorId
                    .replace(/:2f/g, '/')
                    .replace(/:40/g, '@')
                    .replace(/:23/g, '#')
                    .replace(/:3a:3a/g, '::')
                    .replace(/\/@com.sap.vocabularies/g, '::com.sap.vocabularies');
                result[selectorId] = {
                    controlId: selectorId,
                    propertyId: change.content.property,
                    facetId: facetID,
                    newValue: change.content.newBinding ? change.content.newBinding : change.content.newValue,
                    controlType: change.controlType
                };
            }
        }
        catch (error) {
            console.log(`Error while parsing flex change.`, error);
        }
    });
    return result;
}
/**
 * Transfers settings from manifest to object page config
 * @param configPart - part of the configuration to be filled
 * @param manifest - manifest.json of the app
 * @param schemaDefinition - current section of the app specific schema
 * @param pageKeys - list of page keys (comprises the one entry describing the given page)
 * @param flexChanges - list of flex changes (pre-processed by prepareFlexChanges)
 * @param sectionId - ID of the given section (optional)
 * @param sectionTitle - title of the section (Facet ID)
 * @param actionId - ID of the given action (optional)
 */
function transferSettingsAndFlexChanges(configPart, manifest, schemaDefinition, pageKeys, flexChanges, sectionId, sectionTitle, actionId) {
    if (!schemaDefinition) {
        return;
    }
    let deprecatedProperties = [];
    let manifestSection = {};
    if (configPart.getDeprecated) {
        deprecatedProperties = configPart.getDeprecated();
    }
    const unescapedId = sectionId && sectionId.replace(/::@com.sap.vocabularies/g, '/@com.sap.vocabularies');
    for (const propertyKey in schemaDefinition['properties'] || schemaDefinition) {
        const exportPropertyRule = common_1.getReflectMetadata(configPart, propertyKey);
        if (exportPropertyRule || propertyKey === 'columns') {
            if (propertyKey === 'columns' || (exportPropertyRule && exportPropertyRule.flex)) {
                if (sectionId) {
                    for (const selector in flexChanges) {
                        if ((flexChanges[selector].propertyId === propertyKey || propertyKey === 'columns') &&
                            flexChanges[selector].facetId &&
                            (flexChanges[selector].facetId === sectionId ||
                                flexChanges[selector].facetId === unescapedId ||
                                flexChanges[selector].facetId === sectionTitle)) {
                            table_1.addFlexForTable(configPart, flexChanges[selector]);
                            break;
                        }
                    }
                }
                else {
                    for (const selector in flexChanges) {
                        if ((!actionId || selector.endsWith(actionId)) &&
                            ((flexChanges[selector].propertyId === propertyKey && !flexChanges[selector].facetId) ||
                                (flexChanges[selector].propertyId === propertyKey &&
                                    flexChanges[selector].facetId === 'action'))) {
                            configPart[propertyKey] = flexChanges[selector].newValue;
                            break;
                        }
                    }
                }
            }
            else if (exportPropertyRule.manifest) {
                const sectionIdInManifest = sectionId
                    ? sectionId.replace(/\/@/g, '::').replace(/@com.sap/g, 'com.sap')
                    : undefined;
                const path = exportPropertyRule.manifest.path(pageKeys, sectionIdInManifest);
                manifestSection = manifest_1.getManifestSectionByPathV2(manifest, path);
                if (exportPropertyRule.manifest.import) {
                    const value = exportPropertyRule.manifest.import(manifestSection, sectionId);
                    if (value !== undefined) {
                        configPart[propertyKey] = value;
                    }
                }
                else {
                    const manifestKey = exportPropertyRule.manifest.key || propertyKey;
                    if (manifestKey in manifestSection) {
                        configPart[propertyKey] = manifestSection[manifestKey];
                    }
                }
                // Check for deprecated properties. Assumption: all properties reside in the same manifest section
                for (const key in manifestSection) {
                    if (deprecatedProperties[key]) {
                        console.log(common_1.getTextForDeprecated(key, deprecatedProperties[key]));
                    }
                }
            }
        }
    }
}
/**
 *  Fills the sections and subsections of the configuration (recursive function)
 * @param sectionProperties - current properties' list (of sections or subsections)
 * @param manifestSettings - object page settings section of the manifest
 * @param configPart - the given part of the object page config
 * @param manifest - manifest.json of the app
 * @param jsonSchema - app specific schema
 * @param pageKeys - list of page keys (comprises the one entry describing the given page)
 * @param flexChanges - list of flex changes (pre-processed by prepareFlexChanges)
 */
function fillSections(sectionProperties, manifestSettings, configPart, manifest, jsonSchema, pageKeys, flexChanges) {
    let escapedId, sectionTitle;
    for (const sectionId in sectionProperties) {
        escapedId = sectionId.replace(/\/@/g, '::');
        let schemaSection = sectionProperties[sectionId];
        let responsiveTableJsonSchema;
        if (schemaSection['$ref'] && schemaSection['$ref'].startsWith('#/definitions/ObjectPageSectionTableV2')) {
            // Section without subsections
            schemaSection = jsonSchema['definitions']['ObjectPageSectionTableV2<' + escapedId + '>'];
            sectionTitle = schemaSection.title ? schemaSection.title.split('Facet ID: ')[1] : undefined;
            const manifestKey = escapedId.replace('@com.sap', 'com.sap');
            const manifestSection = manifestSettings && manifestSettings.sections && manifestSettings.sections[manifestKey];
            if (manifestSection || flexChanges) {
                const tableType = manifestSection
                    ? manifestSection.tableSettings
                        ? manifestSection.tableSettings.type
                        : 'ResponsiveTable'
                    : 'ResponsiveTable';
                let tableIdSchema;
                switch (tableType) {
                    case 'AnalyticalTable':
                        tableIdSchema = 'ObjectPageAnalyticalTable<' + escapedId + '>';
                        configPart[escapedId] = { table: new controls_1.ObjectPageAnalyticalTable() };
                        break;
                    case 'GridTable':
                        tableIdSchema = 'ObjectPageGridTable<' + escapedId + '>';
                        configPart[escapedId] = { table: new controls_1.ObjectPageGridTable() };
                        break;
                    case 'TreeTable':
                        tableIdSchema = 'ObjectPageTreeTable<' + escapedId + '>';
                        configPart[escapedId] = { table: new controls_1.ObjectPageTreeTable() };
                        break;
                    default:
                    case 'ResponsiveTable':
                        if (jsonSchema['definitions']['ObjectPageResponsiveTableWithMultiSelect<' + escapedId + '>'] &&
                            jsonSchema['definitions']['ObjectPageResponsiveTableWithInlineDelete<' + escapedId + '>']) {
                            responsiveTableJsonSchema = JSON.parse(JSON.stringify(jsonSchema['definitions']['ObjectPageResponsiveTableWithMultiSelect<' + escapedId + '>']));
                            responsiveTableJsonSchema['properties'] = Object.assign(Object.assign({}, responsiveTableJsonSchema['properties']), jsonSchema['definitions']['ObjectPageResponsiveTableWithInlineDelete<' + escapedId + '>']['properties']);
                        }
                        configPart[escapedId] = { table: new controls_1.ObjectPageResponsiveTable() };
                        break;
                }
                transferSettingsAndFlexChanges(configPart[escapedId]['table'], manifest, responsiveTableJsonSchema || jsonSchema['definitions'][tableIdSchema], pageKeys, flexChanges, sectionId, sectionTitle);
            }
        }
        else if (schemaSection['properties'] && schemaSection['properties']['subsections']) {
            // Section with subsections
            configPart[escapedId] = {
                subsections: {}
            };
            schemaSection = jsonSchema['definitions']['ObjectPageSectionTableV2<' + escapedId + '>'];
            sectionTitle = schemaSection.title ? schemaSection.title.split('Facet ID: ')[1] : undefined;
            fillSections(schemaSection['properties'], manifestSettings, configPart[escapedId]['subsections'], manifest, jsonSchema, pageKeys, flexChanges);
        }
        else if (schemaSection['$ref'] && schemaSection['$ref'] === '#/definitions/ObjectPageSectionChartV2') {
            // Section without subsections
            schemaSection = jsonSchema['definitions']['ObjectPageSectionChartV2'];
            sectionTitle = schemaSection.title ? schemaSection.title.split('Facet ID: ')[1] : undefined;
            const manifestKey = escapedId.replace('@com.sap', 'com.sap');
            const manifestSection = manifestSettings && manifestSettings.sections && manifestSettings.sections[manifestKey];
            configPart[escapedId] = { chart: new controls_1.ObjectPageChart() };
            if (manifestSection || flexChanges) {
                transferSettingsAndFlexChanges(configPart[escapedId]['chart'], manifest, jsonSchema['definitions']['ObjectPageChart'], pageKeys, flexChanges, sectionId, sectionTitle);
            }
        }
    }
}
/**
 *  Fills the action of the configuration
 * @param actionProperties - current properties' list (of action)
 * @param configPart - the given part of the object page config
 * @param manifest - manifest.json of the app
 * @param jsonSchema - app specific schema
 * @param pageKeys - list of page keys (comprises the one entry describing the given page)
 * @param flexChanges - list of flex changes (pre-processed by prepareFlexChanges)
 */
function fillActions(actionProperties, configPart, manifest, jsonSchema, pageKeys, flexChanges) {
    let actionId;
    if (flexChanges) {
        configPart['actions'] = {};
        for (const actionProperty in actionProperties) {
            actionId = actionProperty.replace(/\/@/g, '::');
            configPart['actions'][actionId] = new ObjectPageHeaderAction_1.HeaderAction();
            transferSettingsAndFlexChanges(configPart['actions'][actionId], manifest, jsonSchema['definitions']['HeaderAction'], pageKeys, flexChanges, undefined, undefined, actionId);
        }
    }
}
/**
 * Fill properties of object page confg based on manifest settings
 * @param objectPageConfig - Object page config (file content)
 * @param manifest - manifest.json of the given app
 * @param manifestSettings - manifest settings to be transferred
 * @param jsonSchema - app specific JSON schema
 * @param pageKeys - list of page keys (comprises the one entry describing the given page)
 * @param entitySet - entity set for identifying the given object page
 * @param flexChangesForTransfer - list of flex changes (pre-processed by prepareFlexChanges)
 */
function fillConfig(objectPageConfig, manifest, manifestSettings, jsonSchema, pageKeys, entitySet, flexChangesForTransfer) {
    // Transfer page information
    transferSettingsAndFlexChanges(objectPageConfig, manifest, jsonSchema['properties'], pageKeys, flexChangesForTransfer);
    // Transfer header information
    objectPageConfig.header = new controls_1.ObjectPageHeader();
    transferSettingsAndFlexChanges(objectPageConfig.header, manifest, jsonSchema['definitions']['ObjectPageHeader']
        ? jsonSchema['definitions']['ObjectPageHeader']
        : jsonSchema['definitions']['ObjectPageHeader<GenericActions>'], pageKeys, flexChangesForTransfer);
    const headerAction = jsonSchema['definitions']['HeaderActions'];
    if (headerAction) {
        fillActions(headerAction.properties, objectPageConfig.header, manifest, jsonSchema, pageKeys, flexChangesForTransfer);
    }
    if (Object.keys(objectPageConfig.header).length === 0) {
        delete objectPageConfig.header;
    }
    // Transfer Layout information
    objectPageConfig.layout = new controls_1.ObjectPageLayout();
    transferSettingsAndFlexChanges(objectPageConfig.layout, manifest, jsonSchema['definitions']['ObjectPageLayout'], pageKeys, flexChangesForTransfer);
    if (Object.keys(objectPageConfig.layout).length === 0) {
        delete objectPageConfig.layout;
    }
    // Fill sections and subsections
    objectPageConfig.sections = {};
    const sections = jsonSchema['definitions']['Sections'];
    if (sections) {
        fillSections(sections.properties, manifestSettings, objectPageConfig.sections, manifest, jsonSchema, pageKeys, flexChangesForTransfer);
    }
    // Find custom sections
    const customSections = utils_1.findCustomSectionExtensions(manifest, entitySet);
    if (Object.keys(customSections).length > 0) {
        objectPageConfig.sections.custom = [];
        for (const sectionId in customSections) {
            const customSection = 'fragmentName' in customSections[sectionId]
                ? new controls_1.ObjectPageCustomSectionFragment()
                : new controls_1.ObjectPageCustomSectionView();
            transferSettingsAndFlexChanges(customSection, manifest, jsonSchema['definitions']['fragmentName' in customSections[sectionId]
                ? 'ObjectPageCustomSectionFragment'
                : 'ObjectPageCustomSectionView'], pageKeys, flexChangesForTransfer, sectionId);
            objectPageConfig.sections.custom.push(customSection);
        }
    }
}
/**
 * External API: Create configuration (file content) for a V2 object page
 * @param {object} manifest  - manifest of the app
 * @param {string[]} flex - list of flex changes (from UI adaptatin)
 * @param {object} jsonSchema - app specific JSON schema
 * @param {string} entitySet - current entity set, identifying the given page
 * @returns config - the object page configuration
 */
function createObjectPageConfig(manifest, flex, jsonSchema, entitySet) {
    const config = new ObjectPage_1.ObjectPage();
    const pageKeys = [];
    const v2Page = utils_1.findObjectPage(manifest['sap.ui.generic.app'].pages, entitySet, pageKeys);
    if (v2Page) {
        const flexChangesForTransfer = prepareFlexChanges(flex, entitySet);
        fillConfig(config, manifest, v2Page.component.settings, jsonSchema, pageKeys, entitySet, flexChangesForTransfer);
    }
    return config;
}
exports.createObjectPageConfig = createObjectPageConfig;
//# sourceMappingURL=objectPage.js.map