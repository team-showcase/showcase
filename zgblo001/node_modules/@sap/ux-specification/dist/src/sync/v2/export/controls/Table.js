"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../../common");
const decoration_1 = require("../../../common/decoration");
const application_1 = require("../../application");
const getSmartTableControlId = (baseId, idBreadcrumbs, breadcrumbs, controlType) => {
    if (controlType() === 'sap.m.Table') {
        return baseId + 'responsiveTable';
    }
    else if (controlType() === 'sap.ui.comp.smarttable.SmartTable' && baseId.includes('AnalyticalListPage')) {
        return baseId + 'table';
    }
    return decoration_1.buildControlIdFromParent(baseId, idBreadcrumbs);
};
class DataloadSettings {
}
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getDataLoadSettingPathV2(pageKeys)
        }
    }),
    decoration_1.validity({
        since: '1.75.2'
    })
], DataloadSettings.prototype, "loadDataOnAppLaunch", void 0);
exports.DataloadSettings = DataloadSettings;
class CommonTableSettings {
    constructor() {
        this.getDeprecated = () => {
            return [
                {
                    tableType: {
                        since: '1.50.0',
                        deprecated: {
                            since: '1.70.0',
                            text: 'Use tableSettings.type instead.'
                        }
                    }
                },
                {
                    enableAutoBinding: {
                        since: '1.40.0',
                        deprecated: {
                            since: '1.75.2',
                            text: 'Use tableSettings.loadDataOnAppLaunch instead.'
                        }
                    }
                }
            ];
        };
    }
}
__decorate([
    decoration_1.syncRule({
        flex: {
            controlId: decoration_1.buildControlIdFromParent,
            controlType: () => common_1.ControlType.SmartTable,
            exportFunction: decoration_1.exportToFlexChange
        }
    }),
    decoration_1.validity({
        since: '1.38.0'
    })
], CommonTableSettings.prototype, "showTablePersonalisation", void 0);
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: () => 'sap.ui.generic.app/settings'
        }
    }),
    decoration_1.validity({
        since: '1.63.0'
    })
], CommonTableSettings.prototype, "showDraftToggle", void 0);
__decorate([
    decoration_1.syncRule({
        flex: {
            controlId: getSmartTableControlId,
            controlType: () => common_1.ControlType.SmartTable,
            exportFunction: decoration_1.exportToFlexChange
        }
    }),
    decoration_1.validity({
        since: '1.26.0'
    })
], CommonTableSettings.prototype, "useExportToExcel", void 0);
__decorate([
    decoration_1.syncRule({
        flex: {
            controlId: getSmartTableControlId,
            controlType: () => common_1.ControlType.SmartTable,
            exportFunction: decoration_1.exportToFlexChange
        }
    })
], CommonTableSettings.prototype, "fitContainer", void 0);
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getAppSettingPathV2(pageKeys)
        }
    }),
    decoration_1.validity({
        since: '1.48.0'
    })
], CommonTableSettings.prototype, "quickVariantSelection", void 0);
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getAppSettingPathV2(pageKeys),
            export: (manifestSection, configObject) => {
                if (configObject['variants']) {
                    for (const variant in configObject['variants']) {
                        const currentQuickVariantX = configObject['variants'][variant];
                        currentQuickVariantX['tableSettings'] = {};
                        const tablesettings = ['type', 'multiSelect', 'selectAll', 'selectionLimit'];
                        for (const key in currentQuickVariantX) {
                            if (tablesettings.indexOf(key) !== -1) {
                                currentQuickVariantX['tableSettings'][key] = currentQuickVariantX[key];
                                delete currentQuickVariantX[key];
                            }
                        }
                    }
                }
                manifestSection['quickVariantSelectionX'] = configObject;
            }
        }
    }),
    decoration_1.validity({
        since: '1.48.0'
    })
], CommonTableSettings.prototype, "quickVariantSelectionX", void 0);
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getTableSettingPathV2(pageKeys)
        }
    }),
    decoration_1.validity({
        since: '1.38.0'
    })
], CommonTableSettings.prototype, "multiSelect", void 0);
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getTableSettingPathV2(pageKeys)
        }
    }),
    decoration_1.validity({
        since: '1.70.0'
    })
], CommonTableSettings.prototype, "selectAll", void 0);
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getTableSettingPathV2(pageKeys)
        }
    }),
    decoration_1.validity({
        since: '1.70.0'
    })
], CommonTableSettings.prototype, "selectionLimit", void 0);
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getAppSettingPathV2(pageKeys)
        }
    }),
    decoration_1.validity({
        since: '1.75.2'
    })
], CommonTableSettings.prototype, "dataLoadSettings", void 0);
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getAppSettingPathV2(pageKeys)
        }
    }),
    decoration_1.validity({
        since: '1.42.0'
    })
], CommonTableSettings.prototype, "condensedTableLayout", void 0);
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getAppSettingPathV2(pageKeys)
        }
    }),
    decoration_1.validity({
        since: '1.56.0'
    })
], CommonTableSettings.prototype, "enableTableFilterInPageVariant", void 0);
exports.CommonTableSettings = CommonTableSettings;
class ResponsiveTable extends CommonTableSettings {
}
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getTableSettingPathV2(pageKeys)
        }
    }),
    decoration_1.validity({
        since: '1.50.0'
    })
], ResponsiveTable.prototype, "type", void 0);
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getAppSettingPathV2(pageKeys)
        }
    }),
    decoration_1.validity({
        since: '1.54.0'
    })
], ResponsiveTable.prototype, "createWithFilters", void 0);
__decorate([
    decoration_1.syncRule({
        flex: {
            controlId: getSmartTableControlId,
            controlType: () => common_1.ControlType.Table,
            exportFunction: decoration_1.exportToFlexChange
        },
        generate: common_1.addPatternForBindingChangeOfEnum
    }),
    decoration_1.validity({
        since: '1.52.0'
    })
], ResponsiveTable.prototype, "popinLayout", void 0);
__decorate([
    decoration_1.syncRule({
        flex: {
            controlId: getSmartTableControlId,
            controlType: () => common_1.ControlType.Table,
            exportFunction: decoration_1.exportToFlexChange
        }
    })
], ResponsiveTable.prototype, "includeItemInSelection", void 0);
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getTableSettingPathV2(pageKeys)
        }
    }),
    decoration_1.validity({
        since: '1.77.0'
    })
], ResponsiveTable.prototype, "inlineDelete", void 0);
exports.ResponsiveTable = ResponsiveTable;
class TreeTable extends CommonTableSettings {
}
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getTableSettingPathV2(pageKeys)
        }
    }),
    decoration_1.validity({
        since: '1.50.0'
    })
], TreeTable.prototype, "type", void 0);
exports.TreeTable = TreeTable;
class AnalyticalTable extends CommonTableSettings {
}
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getTableSettingPathV2(pageKeys)
        }
    }),
    decoration_1.validity({
        since: '1.50.0'
    })
], AnalyticalTable.prototype, "type", void 0);
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getAppSettingPathV2(pageKeys)
        }
    })
], AnalyticalTable.prototype, "qualifier", void 0);
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getAppSettingPathV2(pageKeys)
        }
    }),
    decoration_1.validity({
        since: '1.38.0'
    })
], AnalyticalTable.prototype, "defaultContentView", void 0);
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getAppSettingPathV2(pageKeys)
        }
    })
], AnalyticalTable.prototype, "defaultFilterMode", void 0);
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getAppSettingPathV2(pageKeys)
        }
    }),
    decoration_1.validity({
        since: '1.60.0'
    })
], AnalyticalTable.prototype, "contentTitle", void 0);
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getAppSettingPathV2(pageKeys)
        }
    })
], AnalyticalTable.prototype, "autoHide", void 0);
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getAppSettingPathV2(pageKeys)
        }
    }),
    decoration_1.validity({
        since: '1.60.0'
    })
], AnalyticalTable.prototype, "filterDefaultsFromSelectionVariant", void 0);
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getAppSettingPathV2(pageKeys)
        }
    }),
    decoration_1.validity({
        since: '1.78.0'
    })
], AnalyticalTable.prototype, "allFiltersAsInParameters", void 0);
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getAppSettingPathV2(pageKeys)
        }
    }),
    decoration_1.validity({
        since: '1.54.0'
    })
], AnalyticalTable.prototype, "createWithFilters", void 0);
exports.AnalyticalTable = AnalyticalTable;
class GridTable extends CommonTableSettings {
}
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getTableSettingPathV2(pageKeys)
        }
    }),
    decoration_1.validity({
        since: '1.50.0'
    })
], GridTable.prototype, "type", void 0);
__decorate([
    decoration_1.syncRule({
        manifest: {
            path: (pageKeys) => application_1.getAppSettingPathV2(pageKeys)
        }
    }),
    decoration_1.validity({
        since: '1.54.0'
    })
], GridTable.prototype, "createWithFilters", void 0);
exports.GridTable = GridTable;
//# sourceMappingURL=Table.js.map