"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../common/index");
const page_1 = require("../../../../specification/common/page");
const controls_1 = require("../../export/controls");
const utils_1 = require("../../../common/utils");
function addSettings(listReportConfig, manifest, jsonSchema, pageKey) {
    // Check table settings from target structure
    const tableType = index_1.findTableType(manifest, pageKey);
    let localJsonSchema;
    switch (tableType) {
        case 'TreeTable':
            listReportConfig.table = Object.assign(new controls_1.TreeTable(), listReportConfig.table);
            index_1.transferSettingsOfObject(listReportConfig.table, manifest, jsonSchema['definitions']['TreeTable<LineItems>'], pageKey);
            break;
        case 'AnalyticalTable':
            listReportConfig.table = Object.assign(new controls_1.AnalyticalTable(), listReportConfig.table);
            index_1.transferSettingsOfObject(listReportConfig.table, manifest, jsonSchema['definitions']['AnalyticalTable<LineItems>'], pageKey);
            break;
        case 'GridTable':
            listReportConfig.table = Object.assign(new controls_1.GridTable(), listReportConfig.table);
            index_1.transferSettingsOfObject(listReportConfig.table, manifest, jsonSchema['definitions']['GridTable<LineItems>'], pageKey);
            break;
        case 'ResponsiveTable':
        default:
            listReportConfig.table = Object.assign(new controls_1.ResponsiveTable(), listReportConfig.table);
            if (jsonSchema['definitions']['ResponsiveTableWithMultiSelect<LineItems>'] &&
                jsonSchema['definitions']['ResponsiveTableWithInlineDelete<LineItems>']) {
                localJsonSchema = JSON.parse(JSON.stringify(jsonSchema['definitions']['ResponsiveTableWithMultiSelect<LineItems>']));
                localJsonSchema['properties'] = Object.assign(Object.assign({}, localJsonSchema['properties']), jsonSchema['definitions']['ResponsiveTableWithInlineDelete<LineItems>']['properties']);
                index_1.transferSettingsOfObject(listReportConfig.table, manifest, localJsonSchema, pageKey);
            }
            break;
    }
    listReportConfig.filterBar = Object.assign(new controls_1.FilterBar(), listReportConfig.filterBar);
    index_1.transferSettingsOfObject(listReportConfig.filterBar, manifest, jsonSchema['definitions']['FilterBar'], pageKey);
}
function createListReportConfig(manifest, flex, jsonSchema) {
    const v2Pages = manifest['sap.ui.generic.app'].pages;
    if (!v2Pages) {
        return;
    }
    const config = { table: {}, filterBar: {} };
    for (const pageKey in v2Pages) {
        const v2Page = v2Pages[pageKey];
        if (utils_1.getPageTypeV2(v2Page.component.name) === page_1.PageType.ListReport) {
            addSettings(config, manifest, jsonSchema, pageKey);
            flex.forEach((change) => {
                index_1.addFlex(config, change, jsonSchema);
            });
        }
    }
    return config;
}
exports.createListReportConfig = createListReportConfig;
//# sourceMappingURL=listReport.js.map