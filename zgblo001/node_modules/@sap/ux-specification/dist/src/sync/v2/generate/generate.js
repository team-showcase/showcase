"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../common/utils");
const objectPage_1 = require("./objectPage");
const listReport_1 = require("./listReport");
const analyticalListReport_1 = require("./analyticalListReport");
/**
 * Generates an app specific schema out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 *
 * @param genericSchema - generic JSON schema of an object page
 * @param entitySet - the base entity type of the given page
 * @param annotations - list of all annotation files (file content plus URI as identifier)
 * @param manifest - manifest.json of the app
 * @param service - service metadata of the app
 *
 * @returns the app specific JSON schema
 */
function generateObjectPageInterfaceV2(genericSchema, entitySet, annotations, manifest) {
    const service = utils_1.parseAndMergeAndConvert(annotations);
    return objectPage_1.generateObjectPageSchemaV2(genericSchema, entitySet, service, manifest);
}
exports.generateObjectPageInterfaceV2 = generateObjectPageInterfaceV2;
/**
 * Generates the app specific schema of a list report out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 *
 * @param genericSchema - generic JSON schema of a list report
 * @param entityType - the base entity type of the given page
 * @param annotations - list of all annotation files (file content plus URI as identifier)
 *
 * @returns the app specific JSON schema
 */
function generateListReportInterfaceV2(genericSchema, entityType, annotations) {
    const service = utils_1.parseAndMergeAndConvert(annotations);
    return listReport_1.generateListReportSchemaV2(genericSchema, entityType, service.entityTypes);
}
exports.generateListReportInterfaceV2 = generateListReportInterfaceV2;
/**
 * Generates the app specific schema of an overview page
 * @param genericSchema - file content of the generic schema
 * @returns the generic schema, as equivalent to the app schema
 */
function generateOVPInterfaceV2(genericSchema) {
    const appSchema = JSON.parse(JSON.stringify(genericSchema));
    appSchema['properties']['cards']['propertyNames'] = {
        pattern: '^[a-zA-Z0-9_\\.\\-]+$'
    };
    return appSchema;
}
exports.generateOVPInterfaceV2 = generateOVPInterfaceV2;
/**
 * Generates the app specific schema of an analytical list page out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 *
 * @param genericSchema - generic JSON schema of a list report
 * @param entityType - the base entity type of the given page
 * @param annotations - list of all annotation files (file content plus URI as identifier)
 */
function generateAnalyticalListPageInterfaceV2(genericSchema, entityType, annotations) {
    const service = utils_1.parseAndMergeAndConvert(annotations);
    return analyticalListReport_1.generateAnalyticalListReportSchemaV2(genericSchema, entityType, service.entityTypes);
}
exports.generateAnalyticalListPageInterfaceV2 = generateAnalyticalListPageInterfaceV2;
//# sourceMappingURL=generate.js.map