"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const webapp_1 = require("../../../specification/v2/webapp");
const common_1 = require("../../../specification/common");
const manifest_1 = require("../export/manifest");
const common_2 = require("../../common");
/**
 * Determines a V2 object page in the manifest, based on the given entity set
 * @param v2Pages - manifest['sap.ui.generic.app'].pages
 * @param entitySet - current entityset
 * @param pageKeys - list of page keys, to be filled
 * @returns v2Page - page as specified in the manifest
 */
function findObjectPage(v2Pages, entitySet, pageKeys) {
    for (const key in v2Pages) {
        const v2Page = v2Pages[key];
        if (common_2.getPageTypeV2(v2Page.component.name) === common_1.PageType.ObjectPage && v2Page.entitySet === entitySet) {
            pageKeys.push(key);
            return v2Page;
        }
        else if (v2Page.pages) {
            pageKeys.push(key);
            return findObjectPage(v2Page.pages, entitySet, pageKeys);
        }
    }
}
exports.findObjectPage = findObjectPage;
/**
 * Determines a V2 list report page in the manifest
 * @param v2Pages - manifest['sap.ui.generic.app'].pages
 * @param pageKeys - list of page keys, to be filled
 * @returns v2Page - page as specified in the manifest
 */
function findListReportPage(v2Pages, pageKeys) {
    for (const key in v2Pages) {
        const v2Page = v2Pages[key];
        pageKeys.push(key);
        if (common_2.getPageTypeV2(v2Page.component.name) === common_1.PageType.ListReport) {
            return v2Page;
        }
    }
}
exports.findListReportPage = findListReportPage;
/**
 * Determines a V2 analytical list page in the manifest
 * @param v2Pages - manifest['sap.ui.generic.app'].pages
 * @param pageKeys - list of page keys, to be filled
 * @returns v2Page - page as specified in the manifest
 */
function findAnalyticalListPage(v2Pages, pageKeys) {
    for (const key in v2Pages) {
        const v2Page = v2Pages[key];
        pageKeys.push(key);
        if (common_2.getPageTypeV2(v2Page.component.name) === common_1.PageType.AnalyticalListPage) {
            return v2Page;
        }
    }
}
exports.findAnalyticalListPage = findAnalyticalListPage;
/**
 * Method which finds custom section extensions in manifest for passed entitySet
 * @param manifest - manifest.
 * @param entitySet - Entity set to lookup while searching custom section extensions.
 * @returns {object} Found object with custom sections
 */
function findCustomSectionExtensions(manifest, entitySet) {
    const customSectionViews = manifest_1.getManifestSectionByPathV2(manifest, `sap.ui5/extends/extensions/${webapp_1.SAPUI5_VIEW_EXTENSION}/${webapp_1.SAPUI5_VIEW_EXTENSION_OBJECT_PAGE}`);
    const pageCustomSections = {};
    for (const key in customSectionViews) {
        const keyParts = key.split('|');
        if (keyParts[1] === entitySet) {
            pageCustomSections[key] = customSectionViews[key];
        }
    }
    return pageCustomSections;
}
exports.findCustomSectionExtensions = findCustomSectionExtensions;
/**
 * Method transfers manifest values into aplication(app or page config) object values using decorators.
 * @param {{ [key: string]: any }} object - Application or Page Config object.
 * @param {Manifest} manifest - Application manifest.
 * @param {object} jsonSchema - Schema entry.
 * @param {string[]} pageKeys - Array of page keys.
 * @param {string} [sectionId] - Section id.
 */
function transferSettingsOfObject(object, manifest, jsonSchema, pageKeys, sectionId) {
    let manifestSection = {};
    for (const key in jsonSchema['properties'] || jsonSchema) {
        const exportPropertyRule = common_2.getReflectMetadata(object, key);
        if (exportPropertyRule && exportPropertyRule.manifest) {
            if (sectionId) {
                sectionId = sectionId.replace(new RegExp('/@', 'g'), '::');
            }
            const path = exportPropertyRule.manifest.path(pageKeys, sectionId);
            manifestSection = manifest_1.getManifestSectionByPathV2(manifest, path);
            if (exportPropertyRule.manifest.import) {
                object[key] = exportPropertyRule.manifest.import(manifestSection, sectionId);
            }
            else {
                const manifestKey = exportPropertyRule.manifest.key || key;
                if (manifestKey in manifestSection) {
                    object[key] = manifestSection[manifestKey];
                }
            }
        }
    }
}
exports.transferSettingsOfObject = transferSettingsOfObject;
//# sourceMappingURL=utils.js.map