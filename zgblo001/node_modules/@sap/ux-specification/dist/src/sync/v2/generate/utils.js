"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../common");
const controls_1 = require("../export/controls");
const decorators_1 = require("../../common/decoration/decorators");
function getCommonLabel(lineItemRecord, entityType) {
    let label, property;
    if (lineItemRecord.Value) {
        if (typeof lineItemRecord.Value === 'string') {
            property = entityType.entityProperties.find((ep) => ep.name === lineItemRecord.Value);
        }
        else {
            property = entityType.entityProperties.find((ep) => ep.name === lineItemRecord.Value.path);
            if (!property) {
                property = lineItemRecord.Value.$target;
            }
        }
    }
    else if (lineItemRecord.Target && lineItemRecord.Target.$target && lineItemRecord.Target.$target.Value) {
        property = lineItemRecord.Target.$target.Value.$target;
    }
    if (property && property.annotations && property.annotations.Common && property.annotations.Common.Label) {
        label = property.annotations.Common.Label;
    }
    return label;
}
/**
 * Determines the description of a column header
 * @param lineItemRecord - the given record of the line item annotation
 * @param entityType - the entity type as part of the AVT ConverterOutput
 */
function getColumnDescription(lineItemRecord, entityType) {
    let title = '', propertyCommonLabel;
    switch (lineItemRecord.$Type) {
        case "com.sap.vocabularies.UI.v1.DataField" /* DataField */:
            propertyCommonLabel = getCommonLabel(lineItemRecord, entityType);
            title =
                lineItemRecord.Label ||
                    propertyCommonLabel ||
                    (lineItemRecord.Value.$target
                        ? lineItemRecord.Value.$target.name
                        : lineItemRecord.Value.value || lineItemRecord.Value.path);
            break;
        case "com.sap.vocabularies.UI.v1.DataFieldWithUrl" /* DataFieldWithUrl */:
            propertyCommonLabel = getCommonLabel(lineItemRecord, entityType);
            title =
                lineItemRecord.Label ||
                    propertyCommonLabel ||
                    (typeof lineItemRecord.Value === 'string' ? lineItemRecord.Value : lineItemRecord.Value.path);
            break;
        case "com.sap.vocabularies.UI.v1.DataFieldForAnnotation" /* DataFieldForAnnotation */:
            propertyCommonLabel = getCommonLabel(lineItemRecord, entityType);
            title =
                lineItemRecord.Label ||
                    propertyCommonLabel ||
                    lineItemRecord.Target.$target.Title ||
                    lineItemRecord.Target.value;
            break;
        case "com.sap.vocabularies.UI.v1.DataFieldForAction" /* DataFieldForAction */:
        case "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" /* DataFieldForIntentBasedNavigation */:
            if (lineItemRecord.Label) {
                title =
                    typeof lineItemRecord.Label === 'string' ? lineItemRecord.Label : lineItemRecord.Action;
            }
            else {
                title = lineItemRecord.Action;
            }
            break;
        case "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation" /* DataFieldWithIntentBasedNavigation */:
            propertyCommonLabel = getCommonLabel(lineItemRecord, entityType);
            title = propertyCommonLabel || lineItemRecord.Value.path;
            break;
        case "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath" /* DataFieldWithNavigationPath */:
            propertyCommonLabel = getCommonLabel(lineItemRecord, entityType);
            title =
                lineItemRecord.Label ||
                    propertyCommonLabel ||
                    (lineItemRecord.Value.$target
                        ? lineItemRecord.Value.$target.name
                        : lineItemRecord.Value.value || lineItemRecord.Value.path);
            break;
        default:
            break;
    }
    return title;
}
/**
 * Adds the line item records to the app schema (for the list report or an object page section comprising a table)
 * @param appSchema - the app specific schema that shall get enhanced
 * @param lineItemAnnotation - the UI.LineItem annotation, comprising all records
 * @param entityType - the entity type as part of the AVT ConverterOutput
 * @param lineItemId - optional: in case of OP the paramter must be passed to distinguish the OP tables;
 *                      in case of LR or ALP no ID is passed, 'LineItems' is taken then.
 */
function addLineItemsType(appSchema, lineItemAnnotation, entityType, lineItemId) {
    let schemaKey;
    appSchema['definitions'][lineItemId || 'LineItems'] = {
        type: 'object',
        properties: {},
        additionalProperties: false
    };
    if (lineItemAnnotation) {
        lineItemAnnotation.forEach((lineItemRecord) => {
            schemaKey = common_1.getSchemaKeyOfLineItemRecord(lineItemRecord);
            if (schemaKey) {
                appSchema['definitions'][lineItemId || 'LineItems']['properties'][schemaKey] = {
                    $ref: '#/definitions/TableColumn',
                    description: getColumnDescription(lineItemRecord, entityType)
                };
            }
        });
    }
}
exports.addLineItemsType = addLineItemsType;
/**
 * Apply post-processing rules as specified in form of "generate" at the syncRule
 * @param schema - given app schema, to be adapted
 */
function checkGenerateRules(schema) {
    let metaDataDefinition;
    for (const key in schema['definitions']) {
        const definition = schema['definitions'][key];
        switch (key) {
            case 'ObjectPageHeader':
                metaDataDefinition = new controls_1.ObjectPageHeader();
                break;
            case 'HeaderAction':
                metaDataDefinition = new controls_1.HeaderAction();
                break;
            case 'TableColumn':
                metaDataDefinition = new controls_1.TableColumn();
                break;
            case 'ResponsiveTableWithInlineDelete<LineItems>':
            case 'ResponsiveTableWithMultiSelect<LineItems>':
                metaDataDefinition = new controls_1.ResponsiveTable();
                break;
            default:
                if (key.startsWith('ObjectPageResponsiveTableWithInlineDelete') ||
                    key.startsWith('ObjectPageResponsiveTableWithMultiSelect')) {
                    metaDataDefinition = new controls_1.ObjectPageResponsiveTable();
                }
                break;
        }
        if (metaDataDefinition) {
            for (const propertyName in definition['properties']) {
                const property = definition['properties'][propertyName];
                metaDataDefinition[propertyName] = property;
                const syncRule = decorators_1.getReflectMetadata(metaDataDefinition, propertyName);
                if (syncRule) {
                    if (typeof syncRule.generate === 'function') {
                        syncRule.generate(schema, definition, propertyName);
                    }
                }
            }
        }
    }
}
exports.checkGenerateRules = checkGenerateRules;
//# sourceMappingURL=utils.js.map