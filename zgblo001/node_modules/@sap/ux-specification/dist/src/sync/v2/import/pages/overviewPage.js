"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const OverviewPage_1 = require("../../export/pages/OverviewPage");
const decorators_1 = require("../../../common/decoration/decorators");
const manifest_1 = require("../../export/manifest");
const controls_1 = require("../../export/controls");
const Card_1 = require("../../../../specification/v2/controls/Card");
function transferSettingsOfObject(object, manifest, jsonSchema, pathHierarchy) {
    if (!jsonSchema) {
        return;
    }
    for (const key in jsonSchema) {
        const exportPropertyRule = decorators_1.getReflectMetadata(object, key);
        if (exportPropertyRule && exportPropertyRule.manifest) {
            const path = exportPropertyRule.manifest.path([...pathHierarchy, key]);
            const manifestSection = manifest_1.getManifestSectionByPathV2(manifest, path);
            if (Object.prototype.hasOwnProperty.call(manifestSection, key)) {
                if (pathHierarchy.length !== 0) {
                    if (key === 'settings') {
                        switch (manifestSection['template']) {
                            case 'sap.ovp.cards.charts.analytical':
                                object[pathHierarchy[0]][Card_1.CardSettingsType.analyticalCardSettings] =
                                    manifestSection[key];
                                break;
                            case 'sap.ovp.cards.list':
                                object[pathHierarchy[0]][Card_1.CardSettingsType.listCardSettings] = manifestSection[key];
                                break;
                            case 'sap.ovp.cards.stack':
                                object[pathHierarchy[0]][Card_1.CardSettingsType.stackCardSettings] = manifestSection[key];
                                break;
                            case 'sap.ovp.cards.linklist':
                                object[pathHierarchy[0]][Card_1.CardSettingsType.linkListCardSettings] = manifestSection[key];
                                break;
                            case 'sap.ovp.cards.table':
                                object[pathHierarchy[0]][Card_1.CardSettingsType.tableCardSettings] = manifestSection[key];
                                break;
                            default:
                                object[pathHierarchy[0]]['settings'] = manifestSection[key];
                                break;
                        }
                    }
                    else {
                        object[pathHierarchy[0]][key] = manifestSection[key];
                    }
                }
                else {
                    object[key] = manifestSection[key];
                }
            }
        }
    }
}
function addSettings(OverviewPageConfig, manifest, jsonSchema) {
    transferSettingsOfObject(OverviewPageConfig, manifest, jsonSchema['properties'], []);
    OverviewPageConfig.cards = {};
    Object.keys(manifest['sap.ovp']['cards']).forEach((newKey) => {
        const cardType = manifest['sap.ovp']['cards'][newKey].template;
        switch (cardType) {
            case Card_1.CardTemplateType.list:
                OverviewPageConfig.cards[newKey] = new controls_1.ListCard();
                OverviewPageConfig.cards = Object.assign(new controls_1.ListCard(), OverviewPageConfig.cards);
                break;
            case Card_1.CardTemplateType.stack:
                OverviewPageConfig.cards[newKey] = new controls_1.StackCard();
                OverviewPageConfig.cards = Object.assign(new controls_1.StackCard(), OverviewPageConfig.cards);
                break;
            case Card_1.CardTemplateType.linklist:
                OverviewPageConfig.cards[newKey] = new controls_1.LinklistCard();
                OverviewPageConfig.cards = Object.assign(new controls_1.LinklistCard(), OverviewPageConfig.cards);
                break;
            case Card_1.CardTemplateType.table:
                OverviewPageConfig.cards[newKey] = new controls_1.TableCard();
                OverviewPageConfig.cards = Object.assign(new controls_1.TableCard(), OverviewPageConfig.cards);
                break;
            case Card_1.CardTemplateType.analytical:
                OverviewPageConfig.cards[newKey] = new controls_1.AnalyticalCard();
                OverviewPageConfig.cards = Object.assign(new controls_1.AnalyticalCard(), OverviewPageConfig.cards);
                break;
            default:
                OverviewPageConfig.cards[newKey] = new controls_1.CustomCard();
                OverviewPageConfig.cards = Object.assign(new controls_1.CustomCard(), OverviewPageConfig.cards);
                break;
        }
        transferSettingsOfObject(OverviewPageConfig.cards, manifest, manifest['sap.ovp']['cards'][newKey], [newKey]);
    });
}
function createOverviewPageConfig(manifest, jsonSchema) {
    const config = new OverviewPage_1.OverviewPage();
    addSettings(config, manifest, jsonSchema);
    return config;
}
exports.createOverviewPageConfig = createOverviewPageConfig;
//# sourceMappingURL=overviewPage.js.map