"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
/**
 * Generates an app specific schema out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 *
 * @param genericSchema - generic JSON schema of a list report
 * @param entityTypeName - the base entity type of the given page
 * @param entityTypes - list of all entity types
 */
function generateAnalyticalListReportSchemaV2(genericSchema, entityTypeName, entityTypes) {
    const appSchema = JSON.parse(JSON.stringify(genericSchema));
    appSchema['properties']['table']['$ref'] = '#/definitions/AnalyticalTableALP<LineItems>';
    const analyticalTableDefinition = JSON.parse(JSON.stringify(appSchema['definitions']['AnalyticalTableALP<GenericColumns>']));
    analyticalTableDefinition['properties']['columns'] = {
        $ref: '#/definitions/LineItems'
    };
    appSchema['definitions']['AnalyticalTableALP<LineItems>'] = analyticalTableDefinition;
    delete appSchema['definitions']['AnalyticalTableALP<GenericColumns>'];
    delete appSchema['definitions']['GenericColumns'];
    const entityType = entityTypes.find((et) => et.name === entityTypeName);
    const lineItemAnnotation = entityType.annotations && entityType.annotations.UI && entityType.annotations.UI.LineItem;
    utils_1.addLineItemsType(appSchema, lineItemAnnotation, entityType);
    utils_1.checkGenerateRules(appSchema);
    return appSchema;
}
exports.generateAnalyticalListReportSchemaV2 = generateAnalyticalListReportSchemaV2;
//# sourceMappingURL=analyticalListReport.js.map