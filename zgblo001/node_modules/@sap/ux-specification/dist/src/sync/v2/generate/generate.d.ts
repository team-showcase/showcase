import { AnnotationData } from '../../common/types';
/**
 * Generates an app specific schema out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 *
 * @param genericSchema - generic JSON schema of an object page
 * @param entitySet - the base entity type of the given page
 * @param annotations - list of all annotation files (file content plus URI as identifier)
 * @param manifest - manifest.json of the app
 * @param service - service metadata of the app
 *
 * @returns the app specific JSON schema
 */
export declare function generateObjectPageInterfaceV2(genericSchema: object, entitySet: string, annotations: AnnotationData[], manifest: object): object;
/**
 * Generates the app specific schema of a list report out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 *
 * @param genericSchema - generic JSON schema of a list report
 * @param entityType - the base entity type of the given page
 * @param annotations - list of all annotation files (file content plus URI as identifier)
 *
 * @returns the app specific JSON schema
 */
export declare function generateListReportInterfaceV2(genericSchema: object, entityType: string, annotations: AnnotationData[]): object;
/**
 * Generates the app specific schema of an overview page
 * @param genericSchema - file content of the generic schema
 * @returns the generic schema, as equivalent to the app schema
 */
export declare function generateOVPInterfaceV2(genericSchema: object): object;
/**
 * Generates the app specific schema of an analytical list page out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 *
 * @param genericSchema - generic JSON schema of a list report
 * @param entityType - the base entity type of the given page
 * @param annotations - list of all annotation files (file content plus URI as identifier)
 */
export declare function generateAnalyticalListPageInterfaceV2(genericSchema: object, entityType: string, annotations: AnnotationData[]): object;
