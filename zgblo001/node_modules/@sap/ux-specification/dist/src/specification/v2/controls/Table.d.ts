export declare enum HAlign {
    initial = "Initial",
    left = "Left",
    center = "Center",
    right = "Right",
    begin = "Begin",
    end = "End"
}
export interface TableColumn {
    /**
     * The width property defines the width of the column.
     */
    width?: string;
    /**
     * The hAlign property defines the horizontal alignment of the column content.
     */
    hAlign?: HAlign;
}
export declare enum TableTypeV2 {
    ResponsiveTable = "ResponsiveTable",
    GridTable = "GridTable",
    AnalyticalTable = "AnalyticalTable",
    TreeTable = "TreeTable"
}
export interface GenericColumns {
    [key: string]: TableColumn;
}
export declare enum PopinLayout {
    Block = "Block",
    GridLarge = "GridLarge",
    GridSmall = "GridSmall"
}
export interface QuickVariant {
    /**
     * A key entry that is used for initializing the corresponding SegmentedButton item. This entry is mandatory.
     */
    key: string;
    /**
     * Use annotationPath to define a specific variant that points to a SelectionVariant or SelectionPresentationVariant annotation.
     */
    annotationPath: string;
}
export interface QuickVariantX extends QuickVariant {
    /**
     * Represents the entity set that will be displayed in this variant
     */
    entitySet: string;
    /**
     * Single selection in tables is enabled by default. If you want, you can enable multi-select.
     */
    multiSelect?: boolean;
    /**
     * The 'Select All' button is disabled by default. To enable it, set selectAll to true.
     */
    selectAll?: boolean;
    /**
     * If new data needs to be loaded from the back-end system for this, the number of lines to be loaded is restricted to the specified limit. The default value for this limit is 200. If selectAll is true, the selection limit is not evaluated.
     */
    selectionLimit?: number;
    /**
     * Use type to define the table type. Note: Grid tables, analytical tables, and tree tables cannot be rendered on smartphones. Instead, responsive tables always show on smartphones.
     */
    type?: TableTypeV2.AnalyticalTable | TableTypeV2.ResponsiveTable | TableTypeV2.GridTable | TableTypeV2.TreeTable;
    /**
     * To enable navigation for charts, you have to set the property to "true" and maintain an internal navigation target in the manifest.
     */
    showItemNavigationOnChart?: boolean;
}
export interface QuickVariantSelection {
    /**
     * To show the number of records available, set showCounts to true.
     */
    showCounts?: boolean;
    /**
     * The variants section contains a set of entries that point to SelectionVariants or SelectionPresentationVariants defined in the annotations.
     */
    variants: {
        '0': QuickVariant;
        '1': QuickVariant;
        '2'?: QuickVariant;
        '3'?: QuickVariant;
        '4'?: QuickVariant;
        '5'?: QuickVariant;
        '6'?: QuickVariant;
        '7'?: QuickVariant;
        '8'?: QuickVariant;
        '9'?: QuickVariant;
    };
}
export interface QuickVariantSelectionX extends QuickVariantSelection {
    /**
     * When set to true, this enables automatic binding of the table with either the tableBindingPath (if it exists) or the entitySet property.
     */
    enableAutoBinding?: boolean;
    /**
     * The variants section contains a set of entries that point to SelectionVariants or SelectionPresentationVariants defined in the annotations.
     */
    variants: {
        '0': QuickVariantX;
        '1': QuickVariantX;
        '2'?: QuickVariantX;
        '3'?: QuickVariantX;
        '4'?: QuickVariantX;
        '5'?: QuickVariantX;
        '6'?: QuickVariantX;
        '7'?: QuickVariantX;
        '8'?: QuickVariantX;
        '9'?: QuickVariantX;
    };
}
export interface CreateWithFilters {
    /**
     * For the new create action to use the filter settings as input, set strategy to "extension" and implement the extension function as mentioned in help.sap.com for SAP S/4 HANA, section “Prefilling Fields When Creating a New Entity Using an Extension Point“.
     */
    strategy: string;
}
export declare enum DefaultContentView {
    charttable = "charttable",
    chart = "chart",
    table = "table"
}
export declare enum DefaultFilterMode {
    visual = "visual",
    compact = "compact"
}
export declare enum LoadDataOnAppLaunchSettings {
    always = "always",
    never = "never",
    ifAnyFilterExist = "ifAnyFilterExist"
}
export interface DataLoadSettings {
    /**
     * Change the default behavior for autoloading of data.
     * For multi-view scenarios, you can also change the setting enableAutobinding to False under quickVariantSelectionX instead of using the loadDataOnAppLaunch setting.
     */
    loadDataOnAppLaunch: LoadDataOnAppLaunchSettings;
}
export interface CommonTableSettings<COLS = GenericColumns> {
    /**
     * The 'Select All' button is disabled by default. To enable it, set selectAll to true.
     */
    selectAll?: boolean;
    /**
     * If new data needs to be loaded from the back-end system for this, the number of lines to be loaded is restricted to the specified limit. The default value for this limit is 200. If selectAll is true, the selection limit is not evaluated.
     */
    selectionLimit?: number;
    /**
     * The showTablePersonalisation attribute can be set to false to hide the table personalization button.
     */
    showTablePersonalisation?: boolean;
    /**
     * useExportToExcel must be set to true if you want to export data to a spreadsheet application, for example Microsoft Excel.
     */
    useExportToExcel?: boolean;
    /**
     * Set to false if the table does not occupy the entire space available in the container.
     */
    fitContainer?: boolean;
    /**
     * With quickVariantSelection you can switch on the multiple view feature. It links to variants you must have added to your annotations beforehand.
     */
    quickVariantSelection?: QuickVariantSelection;
    /**
     * Switch on the multiple view feature (Multiple table mode with charts) and link to the variants you have added to your annotations.
     */
    quickVariantSelectionX?: QuickVariantSelectionX;
    /**
     * For analytical tables, grid tables and tree tables you can define a condensed table layout by setting condensedTableLayout to true.
     */
    condensedTableLayout?: boolean;
    /**
     * If you have enabled harmonized variant management, by default, you cannot set a filter in the table personalization settings.
     * To enable filtering, set the enableTableFilterInPageVariant property to true.
     */
    enableTableFilterInPageVariant?: boolean;
    /**
     * Change the default behavior for autoloading of data.
     */
    dataLoadSettings?: DataLoadSettings;
    columns?: COLS;
}
export interface ResponsiveTableCommonSettings<COLS = GenericColumns> extends CommonTableSettings {
    /**
     * Use type to define the table type. Note: Grid tables, analytical tables, and tree tables cannot be rendered on smartphones. Instead, responsive tables always show on smartphones.
     */
    type?: TableTypeV2.ResponsiveTable;
    /**
     * Set includeItemInSelection to true if you want items to be selectable when they are clicked rather than after the selection control has been set.
     */
    includeItemInSelection?: boolean;
    /**
     * popinLayout defines the layout in which the table pop-in rows are rendered.
     */
    popinLayout?: PopinLayout;
    /**
     * createWithFilters adds a new create action that uses the filter settings as input.
     */
    createWithFilters?: CreateWithFilters;
    /**
     * In the list report and on the object page, you can enable buttons to display and hide draft values. By default, these buttons are hidden. To enable them, set the showDraftToggle flag to true.
     */
    showDraftToggle?: boolean;
}
export interface ResponsiveTableWithMultiSelect<COLS = GenericColumns> extends ResponsiveTableCommonSettings {
    /**
     * Single selection in tables is enabled by default. If you want, you can enable multi-select.
     */
    multiSelect?: boolean;
}
export interface ResponsiveTableWithInlineDelete<COLS = GenericColumns> extends ResponsiveTableCommonSettings {
    /**
     *  Used to enable inline deletion in a responsive table of list report and object page
     */
    inlineDelete?: boolean;
}
export interface ResponsiveTable<COLS = GenericColumns> extends ResponsiveTableCommonSettings, ResponsiveTableWithMultiSelect, ResponsiveTableWithInlineDelete {
}
export interface TreeTable<COLS = GenericColumns> extends CommonTableSettings {
    /**
     * Use type to define the table type. Note: Grid tables, analytical tables, and tree tables cannot be rendered on smartphones. Instead, responsive tables always show on smartphones.
     */
    type?: TableTypeV2.TreeTable;
    /**
     * Single selection in tables is enabled by default. If you want, you can enable multi-select.
     */
    multiSelect?: boolean;
    /**
     * In the list report and on the object page, you can enable buttons to display and hide draft values. By default, these buttons are hidden. To enable them, set the showDraftToggle flag to true.
     */
    showDraftToggle?: boolean;
}
export interface AnalyticalTable<COLS = GenericColumns> extends CommonTableSettings {
    /**
     * Use type to define the table type. Note: Grid tables, analytical tables, and tree tables cannot be rendered on smartphones. Instead, responsive tables always show on smartphones.
     */
    type?: TableTypeV2.AnalyticalTable | TableTypeV2.ResponsiveTable | TableTypeV2.GridTable;
    /**
     * Represents the SelectionPresentationVariant qualifier. ALP looks for SelectionPresentationVariant with this qualifier and if not found, it looks for PresentationVariant with this qualifier.
     */
    qualifier?: string;
    /**
     * When false, control level variant management is used instead of page level variant management
     */
    smartVariantManagement?: boolean;
    /**
     * Determines the visualization of content area
     */
    defaultContentView?: DefaultContentView;
    /**
     * Determines the filter mode that is used
     */
    defaultFilterMode?: DefaultFilterMode;
    /**
     * Lets you define title for the content area
     */
    contentTitle?: string;
    /**
     * Lets you to add default values for FilterBar using SelectionVariant annotation
     */
    filterDefaultsFromSelectionVariant?: boolean;
    /**
     * All filter fields will be set as in parameter
     */
    allFiltersAsInParameters?: boolean;
    /**
     * createWithFilters adds a new create action that uses the filter settings as input.
     */
    createWithFilters?: CreateWithFilters;
    /**
     * Single selection in tables is enabled by default. If you want, you can enable multi-select.
     */
    multiSelect?: boolean;
    /**
     * In the list report and on the object page, you can enable buttons to display and hide draft values. By default, these buttons are hidden. To enable them, set the showDraftToggle flag to true.
     */
    showDraftToggle?: boolean;
}
export interface AnalyticalTableALP<COLS = GenericColumns> extends CommonTableSettings {
    /**
     * Use type to define the table type. Note: Grid tables, analytical tables, and tree tables cannot be rendered on smartphones. Instead, responsive tables always show on smartphones.
     */
    type?: TableTypeV2.AnalyticalTable | TableTypeV2.ResponsiveTable | TableTypeV2.GridTable;
    /**
     * Represents the SelectionPresentationVariant qualifier. ALP looks for SelectionPresentationVariant with this qualifier and if not found, it looks for PresentationVariant with this qualifier.
     */
    qualifier?: string;
    /**
     * When false, control level variant management is used instead of page level variant management
     */
    smartVariantManagement?: boolean;
    /**
     * Determines the visualization of content area
     */
    defaultContentView?: DefaultContentView;
    /**
     * Determines the filter mode that is used
     */
    defaultFilterMode?: DefaultFilterMode;
    /**
     * Lets you define title for the content area
     */
    contentTitle?: string;
    /**
     * This setting allows developer to determine chart / table interaction. 'true' would mean chart act as filter for table, 'false' would mean that matching table rows are highlighted but table is not filtered.
     */
    autoHide?: boolean;
    /**
     * Lets you to add default values for FilterBar using SelectionVariant annotation
     */
    filterDefaultsFromSelectionVariant?: boolean;
    /**
     * All filter fields will be set as in parameter
     */
    allFiltersAsInParameters?: boolean;
    /**
     * Single selection in tables is enabled by default. If you want, you can enable multi-select.
     */
    multiSelect?: boolean;
}
export interface GridTable<COLS = GenericColumns> extends CommonTableSettings {
    /**
     * Use type to define the table type. Note: Grid tables, analytical tables, and tree tables cannot be rendered on smartphones. Instead, responsive tables always show on smartphones.
     */
    type?: TableTypeV2.GridTable;
    /**
     * createWithFilters adds a new create action that uses the filter settings as input.
     */
    createWithFilters?: CreateWithFilters;
    /**
     * Single selection in tables is enabled by default. If you want, you can enable multi-select.
     */
    multiSelect?: boolean;
    /**
     * In the list report and on the object page, you can enable buttons to display and hide draft values. By default, these buttons are hidden. To enable them, set the showDraftToggle flag to true.
     */
    showDraftToggle?: boolean;
}
