import * as Org_OData_Aggregation_V1 from "./Aggregation";

// Type containing all possible annotations to use for EntityContainer
export interface EntityContainerAnnotations_Aggregation {
	"ApplySupported"?: Org_OData_Aggregation_V1.ApplySupported;
	"CustomAggregate"?: Org_OData_Aggregation_V1.CustomAggregate;
}

// Type containing all possible annotations to use for Schema
export interface SchemaAnnotations_Aggregation {}

// Type containing all possible annotations to use for Reference
export interface ReferenceAnnotations_Aggregation {}

// Type containing all possible annotations to use for EntityType
export interface EntityTypeAnnotations_Aggregation {
	"ApplySupported"?: Org_OData_Aggregation_V1.ApplySupported;
	"CustomAggregate"?: Org_OData_Aggregation_V1.CustomAggregate;
	"LeveledHierarchy"?: Org_OData_Aggregation_V1.LeveledHierarchy;
	"RecursiveHierarchy"?: Org_OData_Aggregation_V1.RecursiveHierarchy;
}

// Type containing all possible annotations to use for EnumType
export interface EnumTypeAnnotations_Aggregation {}

// Type containing all possible annotations to use for ComplexType
export interface ComplexTypeAnnotations_Aggregation {
	"ApplySupported"?: Org_OData_Aggregation_V1.ApplySupported;
	"CustomAggregate"?: Org_OData_Aggregation_V1.CustomAggregate;
	"LeveledHierarchy"?: Org_OData_Aggregation_V1.LeveledHierarchy;
	"RecursiveHierarchy"?: Org_OData_Aggregation_V1.RecursiveHierarchy;
}

// Type containing all possible annotations to use for Property
export interface PropertyAnnotations_Aggregation {
	"Groupable"?: Org_OData_Aggregation_V1.Groupable;
	"Aggregatable"?: Org_OData_Aggregation_V1.Aggregatable;
	"ContextDefiningProperties"?: Org_OData_Aggregation_V1.ContextDefiningProperties;
}

// Type containing all possible annotations to use for NavigationProperty
export interface NavigationPropertyAnnotations_Aggregation {
	"Groupable"?: Org_OData_Aggregation_V1.Groupable;
	"Aggregatable"?: Org_OData_Aggregation_V1.Aggregatable;
}

// Type containing all possible annotations to use for TypeDefinition
export interface TypeDefinitionAnnotations_Aggregation {}

// Type containing all possible annotations to use for Term
export interface TermAnnotations_Aggregation {}

// Type containing all possible annotations to use for Parameter
export interface ParameterAnnotations_Aggregation {}

// Type containing all possible annotations to use for ReturnType
export interface ReturnTypeAnnotations_Aggregation {}

// Type containing all possible annotations to use for EntitySet
export interface EntitySetAnnotations_Aggregation {}

// Type containing all possible annotations to use for Singleton
export interface SingletonAnnotations_Aggregation {}

// Type containing all possible annotations to use for ActionImport
export interface ActionImportAnnotations_Aggregation {}

// Type containing all possible annotations to use for FunctionImport
export interface FunctionImportAnnotations_Aggregation {}

// Type containing all possible annotations to use for Action
export interface ActionAnnotations_Aggregation {
	"AvailableOnAggregates"?: Org_OData_Aggregation_V1.AvailableOnAggregates;
}

// Type containing all possible annotations to use for Function
export interface FunctionAnnotations_Aggregation {
	"AvailableOnAggregates"?: Org_OData_Aggregation_V1.AvailableOnAggregates;
}

// Type containing all possible annotations to use for Include
export interface IncludeAnnotations_Aggregation {}

// Type containing all possible annotations to use for Annotation
export interface AnnotationAnnotations_Aggregation {
	"ContextDefiningProperties"?: Org_OData_Aggregation_V1.ContextDefiningProperties;
}

// Type containing all possible annotations to use for Collection
export interface CollectionAnnotations_Aggregation {}

// Type containing all possible annotations to use for Record
export interface RecordAnnotations_Aggregation {}

// Type containing all possible annotations to use for PropertyValue
export interface PropertyValueAnnotations_Aggregation {}
