import * as Core from "./Core";
import * as Aggregation from "./Aggregation";
import * as Validation from "./Validation";
import * as Common from "./Common";
import * as Edm from "../Edm";
import AnnotationTerm = Edm.AnnotationTerm;
import PropertyAnnotationValue = Edm.PropertyAnnotationValue;
import EnumValue = Edm.EnumValue;
import ComplexType = Edm.ComplexType;

// Term
/**
  A property holding the key of a dimension in an analytical context
*/
export type Dimension = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;

// Term
/**
  A property holding the numeric value of a measure in an analytical context
*/
export type Measure = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;

// Term
/**
  The measure has non-negative and additive values; it can be used in whole-part charts, e.g. the Donut
*/
export type AccumulativeMeasure = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;

// Term
/**
  Number of properties in the entity instance that have been aggregated away
*/
export type RolledUpPropertyCount = AnnotationTerm<Edm.Int16>;

// Term
/**
  
            URL to retrieve more detailed data related to a node of a recursive hierarchy.
            Annotations with this term MUST include a qualifier to select the hierarchy for which the drill URL is provided.
          
*/
export type DrillURL = AnnotationTerm<PropertyAnnotationValue<Edm.String>>;

// Term
/**
   Processes or generates plan data. Its logic may have side-effects on entity sets.
          
*/
export type PlanningAction = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;

// Term
/**
  Dynamic properties for aggregate expressions with specified aggregation method defined on the annotated entity type.
*/
export type AggregatedProperties = AnnotationTerm<AggregatedPropertyTypeTypes[]>;

// ComplexType
export type AggregatedPropertyType = ComplexType & {
	$Type: AnalyticsAnnotationTypes.AggregatedPropertyType;
	/**
        Name the dynamic property holding the aggregated value.
    */
	Name?: Common.SimpleIdentifier;
	/**
        Name of the standard or custom aggregation method to be applied.
    */
	AggregationMethod: PropertyAnnotationValue<Edm.String>;
	/**
        Property whose values shall be aggregated.
    */
	AggregatableProperty: PropertyAnnotationValue<Edm.PropertyPath>;
};

export const enum AnalyticsAnnotationTerms {
	Dimension = "com.sap.vocabularies.Analytics.v1.Dimension",
	Measure = "com.sap.vocabularies.Analytics.v1.Measure",
	AccumulativeMeasure = "com.sap.vocabularies.Analytics.v1.AccumulativeMeasure",
	RolledUpPropertyCount = "com.sap.vocabularies.Analytics.v1.RolledUpPropertyCount",
	DrillURL = "com.sap.vocabularies.Analytics.v1.DrillURL",
	PlanningAction = "com.sap.vocabularies.Analytics.v1.PlanningAction",
	AggregatedProperties = "com.sap.vocabularies.Analytics.v1.AggregatedProperties"
}
export const enum AnalyticsAnnotationTypes {
	AggregatedPropertyType = "com.sap.vocabularies.Analytics.v1.AggregatedPropertyType"
}

export type AggregatedPropertyTypeTypes = AnnotationTerm<AggregatedPropertyType>;
