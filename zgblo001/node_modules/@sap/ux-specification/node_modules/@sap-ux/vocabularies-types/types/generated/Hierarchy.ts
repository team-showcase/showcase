import * as Core from "./Core";
import * as Aggregation from "./Aggregation";
import * as Common from "./Common";
import * as Edm from "../Edm";
import AnnotationTerm = Edm.AnnotationTerm;
import PropertyAnnotationValue = Edm.PropertyAnnotationValue;
import EnumValue = Edm.EnumValue;
import ComplexType = Edm.ComplexType;

// Term
/**
  Defines a recursive hierarchy.
*/
export type RecursiveHierarchy = AnnotationTerm<RecursiveHierarchyTypeTypes>;

// ComplexType
export type RecursiveHierarchyType = ComplexType & {
	$Type: HierarchyAnnotationTypes.RecursiveHierarchyType;
	/**
        Property holding the parent hierarchy node value
    */
	ParentNodeProperty: PropertyAnnotationValue<Edm.PropertyPath>;
	/**
        Property holding the external key value for a node
    */
	ExternalKeyProperty: PropertyAnnotationValue<Edm.PropertyPath>;
	/**
        Property for whose values the hierarchy is defined
    */
	ValueProperty?: PropertyAnnotationValue<Edm.PropertyPath>;
	/**
        Property holding the number of descendants of a node
    */
	DescendantCountProperty?: PropertyAnnotationValue<Edm.PropertyPath>;
	/**
        Property holding the drill state of a node
    */
	DrillStateProperty?: PropertyAnnotationValue<Edm.PropertyPath>;
	/**
        Property holding the sibling rank of a node
    */
	SiblingRankProperty?: PropertyAnnotationValue<Edm.PropertyPath>;
	/**
        Property holding the preorder rank of a node
    */
	PreorderRankProperty?: PropertyAnnotationValue<Edm.PropertyPath>;
};

export const enum HierarchyAnnotationTerms {
	RecursiveHierarchy = "com.sap.vocabularies.Hierarchy.v1.RecursiveHierarchy"
}
export const enum HierarchyAnnotationTypes {
	RecursiveHierarchyType = "com.sap.vocabularies.Hierarchy.v1.RecursiveHierarchyType"
}

export type RecursiveHierarchyTypeTypes = AnnotationTerm<RecursiveHierarchyType>;
