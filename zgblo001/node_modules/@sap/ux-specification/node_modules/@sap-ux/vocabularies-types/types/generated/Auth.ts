import * as Core from "./Core";
import * as Edm from "../Edm";
import AnnotationTerm = Edm.AnnotationTerm;
import PropertyAnnotationValue = Edm.PropertyAnnotationValue;
import EnumValue = Edm.EnumValue;
import ComplexType = Edm.ComplexType;

// Term
/**
  At least one of the specified security schemes are required to make a request against the service
*/
export type SecuritySchemes = AnnotationTerm<SecuritySchemeTypes[]>;

// ComplexType
export type SecurityScheme = ComplexType & {
	$Type: AuthAnnotationTypes.SecurityScheme;
	/**
        The name of a required authorization scheme
    */
	Authorization: SchemeName;
	/**
        The names of scopes required from this authorization scheme
    */
	RequiredScopes: PropertyAnnotationValue<Edm.String[]>;
};

// Term
/**
  Lists the methods supported by the service to authorize access
*/
export type Authorizations = AnnotationTerm<AuthorizationTypes[]>;

// ComplexType
/**
  Base type for all Authorization types
*/
export type Authorization = ComplexType & {
	$Type: AuthAnnotationTypes.Authorization;
	/**
        Name that can be used to reference the authorization scheme
    */
	Name: PropertyAnnotationValue<Edm.String>;
	/**
        Description of the authorization scheme
    */
	Description?: PropertyAnnotationValue<Edm.String>;
};

// ComplexType
export type OpenIDConnect = ComplexType &
	Omit<Authorization, "$Type"> & {
		$Type: AuthAnnotationTypes.OpenIDConnect;
		/**
        Issuer location for the OpenID Provider. Configuration information can be obtained by appending `/.well-known/openid-configuration` to this Url.
    */
		IssuerUrl: PropertyAnnotationValue<Edm.String>;
	};

// ComplexType
export type Http = ComplexType &
	Omit<Authorization, "$Type"> & {
		$Type: AuthAnnotationTypes.Http;
		/**
        HTTP Authorization scheme to be used in the Authorization header, as per RFC7235
    */
		Scheme: PropertyAnnotationValue<Edm.String>;
		/**
        Format of the bearer token
    */
		BearerFormat?: PropertyAnnotationValue<Edm.String>;
	};

// ComplexType
export type OAuthAuthorization = ComplexType &
	Omit<Authorization, "$Type"> & {
		$Type: AuthAnnotationTypes.OAuthAuthorization;
		/**
        Available scopes
    */
		Scopes: AnnotationTerm<AuthorizationScopeTypes[]>;
		/**
        Refresh Url
    */
		RefreshUrl?: PropertyAnnotationValue<Edm.String>;
	};

// ComplexType
export type OAuth2ClientCredentials = ComplexType &
	Omit<OAuthAuthorization, "$Type"> & {
		$Type: AuthAnnotationTypes.OAuth2ClientCredentials;
		/**
        Token Url
    */
		TokenUrl: PropertyAnnotationValue<Edm.String>;
	};

// ComplexType
export type OAuth2Implicit = ComplexType &
	Omit<OAuthAuthorization, "$Type"> & {
		$Type: AuthAnnotationTypes.OAuth2Implicit;
		/**
        Authorization URL
    */
		AuthorizationUrl: PropertyAnnotationValue<Edm.String>;
	};

// ComplexType
export type OAuth2Password = ComplexType &
	Omit<OAuthAuthorization, "$Type"> & {
		$Type: AuthAnnotationTypes.OAuth2Password;
		/**
        Token Url
    */
		TokenUrl: PropertyAnnotationValue<Edm.String>;
	};

// ComplexType
export type OAuth2AuthCode = ComplexType &
	Omit<OAuthAuthorization, "$Type"> & {
		$Type: AuthAnnotationTypes.OAuth2AuthCode;
		/**
        Authorization URL
    */
		AuthorizationUrl: PropertyAnnotationValue<Edm.String>;
		/**
        Token Url
    */
		TokenUrl: PropertyAnnotationValue<Edm.String>;
	};

// ComplexType
export type AuthorizationScope = ComplexType & {
	$Type: AuthAnnotationTypes.AuthorizationScope;
	/**
        Scope name
    */
	Scope: PropertyAnnotationValue<Edm.String>;
	/**
        Identity that has access to the scope or can grant access to the scope.
    */
	Grant?: PropertyAnnotationValue<Edm.String>;
	/**
        Description of the scope
    */
	Description: PropertyAnnotationValue<Edm.String>;
};

// ComplexType
export type ApiKey = ComplexType &
	Omit<Authorization, "$Type"> & {
		$Type: AuthAnnotationTypes.ApiKey;
		/**
        The name of the header or query parameter
    */
		KeyName: PropertyAnnotationValue<Edm.String>;
		/**
        Whether the API Key is passed in the header or as a query option
    */
		Location: KeyLocation;
	};

// EnumType
export const enum KeyLocation {
	/**
	API Key is passed in the header
    */
	/**
	undefined
    */
	Header = "Auth.KeyLocation/Header",
	/**
	API Key is passed as a query option
    */
	/**
	undefined
    */
	QueryOption = "Auth.KeyLocation/QueryOption",
	/**
	API Key is passed as a cookie
    */
	/**
	undefined
    */
	Cookie = "Auth.KeyLocation/Cookie"
}

// Typedefinition
/**
  The name of the authorization scheme.
*/
export type SchemeName = Edm.String;
export const enum AuthAnnotationTerms {
	SecuritySchemes = "Org.OData.Authorization.V1.SecuritySchemes",
	Authorizations = "Org.OData.Authorization.V1.Authorizations"
}
export const enum AuthAnnotationTypes {
	SecurityScheme = "Org.OData.Authorization.V1.SecurityScheme",
	Authorization = "Org.OData.Authorization.V1.Authorization",
	OpenIDConnect = "Org.OData.Authorization.V1.OpenIDConnect",
	Http = "Org.OData.Authorization.V1.Http",
	OAuthAuthorization = "Org.OData.Authorization.V1.OAuthAuthorization",
	OAuth2ClientCredentials = "Org.OData.Authorization.V1.OAuth2ClientCredentials",
	OAuth2Implicit = "Org.OData.Authorization.V1.OAuth2Implicit",
	OAuth2Password = "Org.OData.Authorization.V1.OAuth2Password",
	OAuth2AuthCode = "Org.OData.Authorization.V1.OAuth2AuthCode",
	AuthorizationScope = "Org.OData.Authorization.V1.AuthorizationScope",
	ApiKey = "Org.OData.Authorization.V1.ApiKey"
}

export type SecuritySchemeTypes = AnnotationTerm<SecurityScheme>;
export type AuthorizationTypes = AnnotationTerm<OpenIDConnectTypes | HttpTypes | OAuthAuthorizationTypes | ApiKeyTypes>;
export type OpenIDConnectTypes = AnnotationTerm<OpenIDConnect>;
export type HttpTypes = AnnotationTerm<Http>;
export type OAuthAuthorizationTypes = AnnotationTerm<
	OAuth2ClientCredentialsTypes | OAuth2ImplicitTypes | OAuth2PasswordTypes | OAuth2AuthCodeTypes
>;
export type OAuth2ClientCredentialsTypes = AnnotationTerm<OAuth2ClientCredentials>;
export type OAuth2ImplicitTypes = AnnotationTerm<OAuth2Implicit>;
export type OAuth2PasswordTypes = AnnotationTerm<OAuth2Password>;
export type OAuth2AuthCodeTypes = AnnotationTerm<OAuth2AuthCode>;
export type AuthorizationScopeTypes = AnnotationTerm<AuthorizationScope>;
export type ApiKeyTypes = AnnotationTerm<ApiKey>;
