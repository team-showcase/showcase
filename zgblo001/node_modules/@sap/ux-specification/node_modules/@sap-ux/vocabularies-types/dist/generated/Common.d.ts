import * as Core from "./Core";
import * as Edm from "../Edm";
import AnnotationTerm = Edm.AnnotationTerm;
import PropertyAnnotationValue = Edm.PropertyAnnotationValue;
import EnumValue = Edm.EnumValue;
import ComplexType = Edm.ComplexType;
/**
  Terms, types, and properties annotated with this term are experimental and can be changed incompatibly or removed completely any time without prior warning.
*/
export declare type Experimental = AnnotationTerm<PropertyAnnotationValue<Edm.String>>;
/**
  1 for first version of a service, incremented when schema changes incompatibly and service is published with a different URI
*/
export declare type ServiceVersion = AnnotationTerm<Edm.Int32>;
/**
  0 for first schema version within a service version, incremented when schema changes compatibly
*/
export declare type ServiceSchemaVersion = AnnotationTerm<Edm.Int32>;
/**
  A short, human-readable text suitable for labels and captions in UIs
*/
export declare type Label = AnnotationTerm<PropertyAnnotationValue<Edm.String>>;
/**
  A short, human-readable text suitable for column headings in UIs
*/
export declare type Heading = AnnotationTerm<PropertyAnnotationValue<Edm.String>>;
/**
  A short, human-readable text suitable for tool tips in UIs
*/
export declare type QuickInfo = AnnotationTerm<PropertyAnnotationValue<Edm.String>>;
/**
  A descriptive text for values of the annotated property. Value MUST be a dynamic expression when used as metadata annotation.
*/
export declare type Text = AnnotationTerm<PropertyAnnotationValue<Edm.String>>;
/**
  The annotated property contains a descriptive text for values of the referenced property.
*/
export declare type TextFor = AnnotationTerm<Edm.PropertyPath>;
/**
  An identifier to distinguish multiple texts in different languages for the same entity
*/
export declare type IsLanguageIdentifier = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Human-readable text that may contain formatting information
*/
export declare type TextFormat = EnumValue<TextFormatType>;
export declare const enum TextFormatType {
    /**
    Plain text, line breaks represented as the character 0x0A
    */
    /**
    undefined
    */
    plain = "Common.TextFormatType/plain",
    /**
    Plain text with markup that can validly appear directly within an HTML DIV element
    */
    /**
    undefined
    */
    html = "Common.TextFormatType/html"
}
/**
  Contains only digits
*/
export declare type IsDigitSequence = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Contains just uppercase characters
*/
export declare type IsUpperCase = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Annotated property or parameter is a currency code
*/
export declare type IsCurrency = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Annotated property or parameter is a unit of measure
*/
export declare type IsUnit = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  The number of fractional decimal digits of a currency amount or measured quantity
*/
export declare type UnitSpecificScale = AnnotationTerm<Edm.PrimitiveType>;
/**
  The number of significant decimal digits of a currency amount or measured quantity
*/
export declare type UnitSpecificPrecision = AnnotationTerm<Edm.PrimitiveType>;
/**
  The listed properties form a secondary key. Multiple secondary keys are possible using different qualifiers.
*/
export declare type SecondaryKey = AnnotationTerm<Edm.PropertyPath[]>;
/**
  The annotated set or collection contains at least this number of items
*/
export declare type MinOccurs = AnnotationTerm<Edm.Int64>;
/**
  The annotated set or collection contains at most this number of items
*/
export declare type MaxOccurs = AnnotationTerm<Edm.Int64>;
/**
  Entity representing an n:m association with attributes
*/
export declare type AssociationEntity = AnnotationTerm<Edm.NavigationPropertyPath[]>;
/**
  Shortcut for a multi-segment navigation, contains the long path with all its segments
*/
export declare type DerivedNavigation = AnnotationTerm<Edm.NavigationPropertyPath>;
/**
  Property contains sensitive data that should by default be masked on a UI and clear-text visible only upon user interaction
*/
export declare type Masked = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Property contains sensitive data that is by default not transferred
*/
export declare type MaskedValue = AnnotationTerm<PropertyAnnotationValue<Edm.String>>;
/**
  Property contains sensitive data that is by default not transferred
*/
export declare type MaskedAlways = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Name of the Semantic Object represented as this entity type or identified by this property
*/
export declare type SemanticObject = AnnotationTerm<PropertyAnnotationValue<Edm.String>>;
/**
  Maps properties of the annotated entity type or sibling properties of the annotated property to properties of the Semantic Object
*/
export declare type SemanticObjectMapping = AnnotationTerm<SemanticObjectMappingTypeTypes[]>;
/**
  Maps a property of the annotated entity type or a sibling property of the annotated property to a property of the Semantic Object
*/
export declare type SemanticObjectMappingType = ComplexType & {
    $Type: CommonAnnotationTypes.SemanticObjectMappingType;
    /**
        Path to a local property that provides the value for the Semantic Object property
    */
    LocalProperty: PropertyAnnotationValue<Edm.PropertyPath>;
    /**
        Name of the Semantic Object property
    */
    SemanticObjectProperty: PropertyAnnotationValue<Edm.String>;
};
/**
  List of actions that are not available in the current state of the instance of the Semantic Object
*/
export declare type SemanticObjectUnavailableActions = AnnotationTerm<PropertyAnnotationValue<Edm.String[]>>;
/**
  Term can also be used as instance annotation; AppliesTo of this term specifies where it can be applied
*/
export declare type IsInstanceAnnotation = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  These properties only allow a subset of expressions
*/
export declare type FilterExpressionRestrictions = AnnotationTerm<FilterExpressionRestrictionTypeTypes[]>;
export declare type FilterExpressionRestrictionType = ComplexType & {
    $Type: CommonAnnotationTypes.FilterExpressionRestrictionType;
    Property?: PropertyAnnotationValue<Edm.PropertyPath>;
    AllowedExpressions?: FilterExpressionType;
};
export declare const enum FilterExpressionType {
    /**
    a single 'eq' clause
    */
    /**
    undefined
    */
    SingleValue = "Common.FilterExpressionType/SingleValue",
    /**
    one or more 'eq' clauses, separated by 'or'
    */
    /**
    undefined
    */
    MultiValue = "Common.FilterExpressionType/MultiValue",
    /**
    at most one 'ge' and one 'le' clause, separated by 'and', alternatively a single 'eq' clause
    */
    /**
    undefined
    */
    SingleInterval = "Common.FilterExpressionType/SingleInterval"
}
/**
  Control state of a property
*/
export declare type FieldControl = EnumValue<FieldControlType>;
/**
  Control state of a property
*/
export declare const enum FieldControlType {
    /**
    Property is mandatory from a business perspective
    */
    /**
    This annotation value does not imply any restrictions on the value range of the property. For restricting the value range use e.g. the standard type facet `Nullable` with a value of `false` to exclude the `null` value, or terms from the [Validation vocabulary](https://github.com/oasis-tcs/odata-vocabularies/blob/master/vocabularies/Org.OData.Validation.V1.md).
    */
    Mandatory = "Common.FieldControlType/Mandatory",
    /**
    Property may have a value
    */
    /**
    This value does not make sense as a static annotation value.
    */
    Optional = "Common.FieldControlType/Optional",
    /**
    Property value cannot be changed
    */
    /**
    To statically mark a property as read-only use term [Core.Computed](https://github.com/oasis-tcs/odata-vocabularies/blob/master/vocabularies/Org.OData.Core.V1.md#Computed) instead
    */
    ReadOnly = "Common.FieldControlType/ReadOnly",
    /**
    Property has no meaning in the current entity state
    */
    /**
    This value does not make sense as a static annotation value.

Example for dynamic use: in a travel expense report the property `DestinationCountry` is inapplicable if trip type is domestic, and mandatory if trip type is international.
    */
    Inapplicable = "Common.FieldControlType/Inapplicable",
    /**
    Deprecated synonymn for Inapplicable, do not use
    */
    /**
    To statically hide a property on a UI use [UI.Hidden](UI.md#Hidden) instead
    */
    Hidden = "Common.FieldControlType/Hidden"
}
/**
  A machine-readable exception category
*/
export declare type ExceptionCategory = AnnotationTerm<PropertyAnnotationValue<Edm.String>>;
/**
  ...
*/
export declare type Application = AnnotationTerm<ApplicationTypeTypes>;
export declare type ApplicationType = ComplexType & {
    $Type: CommonAnnotationTypes.ApplicationType;
    /**
        Software component of service implementation
    */
    Component?: PropertyAnnotationValue<Edm.String>;
    /**
        ...
    */
    ServiceRepository?: PropertyAnnotationValue<Edm.String>;
    /**
        ...
    */
    ServiceId?: PropertyAnnotationValue<Edm.String>;
    /**
        ...
    */
    ServiceVersion?: PropertyAnnotationValue<Edm.String>;
};
/**
  ...
*/
export declare type Timestamp = AnnotationTerm<Edm.DateTimeOffset>;
/**
  ...
*/
export declare type TransactionId = AnnotationTerm<PropertyAnnotationValue<Edm.String>>;
/**
  Hints for resolving this error
*/
export declare type ErrorResolution = AnnotationTerm<ErrorResolutionTypeTypes>;
export declare type ErrorResolutionType = ComplexType & {
    $Type: CommonAnnotationTypes.ErrorResolutionType;
    /**
        Short hint on how to analyze this error
    */
    Analysis?: PropertyAnnotationValue<Edm.String>;
    /**
        Note for error resolution
    */
    Note?: PropertyAnnotationValue<Edm.String>;
    /**
        Additional note for error resolution
    */
    AdditionalNote?: PropertyAnnotationValue<Edm.String>;
};
/**
  Collection of end-user messages
*/
export declare type Messages = AnnotationTerm<Edm.ComplexType[]>;
/**
  Additional targets for the message
*/
export declare type additionalTargets = AnnotationTerm<PropertyAnnotationValue<Edm.String[]>>;
/**
  Location of the message long text
*/
export declare type longtextUrl = AnnotationTerm<PropertyAnnotationValue<Edm.String>>;
/**
  Classifies an end-user message as info, success, warning, or error
*/
export declare type numericSeverity = AnnotationTerm<PropertyAnnotationValue<NumericMessageSeverityType>>;
/**
  The maximum severity of all end-user messages attached to an entity, null if no messages are attached
*/
export declare type MaximumNumericMessageSeverity = AnnotationTerm<PropertyAnnotationValue<NumericMessageSeverityType>>;
/**
  Classifies an end-user message as info, success, warning, or error
*/
export declare type NumericMessageSeverityType = Edm.Byte;
/**
  Criticality of the function or action to enforce a warning or similar before it's executed
*/
export declare type IsActionCritical = AnnotationTerm<Edm.Boolean>;
/**
  Attributes related to this property, which may occur in denormalized entity types
*/
export declare type Attributes = AnnotationTerm<Edm.PropertyPath[]>;
/**
  A recursive hierarchy related to this property. The annotation path must end in Aggregation.RecursiveHierarchy.
*/
export declare type RelatedRecursiveHierarchy = AnnotationTerm<Edm.AnnotationPath<any>>;
/**
  An interval with lower and upper boundaries described by two properties
*/
export declare type Interval = AnnotationTerm<IntervalTypeTypes>;
export declare type IntervalType = ComplexType & {
    $Type: CommonAnnotationTypes.IntervalType;
    /**
        Property holding the lower interval boundary
    */
    LowerBoundary: PropertyAnnotationValue<Edm.PropertyPath>;
    /**
        The lower boundary value is included in the interval
    */
    LowerBoundaryIncluded: PropertyAnnotationValue<Edm.Boolean>;
    /**
        Property holding the upper interval boundary
    */
    UpperBoundary: PropertyAnnotationValue<Edm.PropertyPath>;
    /**
        The upper boundary value is included in the interval
    */
    UpperBoundaryIncluded: PropertyAnnotationValue<Edm.Boolean>;
};
/**
  The annotated entity type has one or more containment navigation properties.
            An instance of the annotated entity type provides the context required for determining
            the target entity sets reached by these containment navigation properties.
*/
export declare type ResultContext = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  A referential constraint to a reference set that is not reachable via a navigation property
*/
export declare type WeakReferentialConstraint = AnnotationTerm<WeakReferentialConstraintTypeTypes>;
export declare type WeakReferentialConstraintType = ComplexType & {
    $Type: CommonAnnotationTypes.WeakReferentialConstraintType;
    /**
        URI of the service containing the reference set
    */
    ReferenceRoot: PropertyAnnotationValue<Edm.String>;
    /**
        Resource path of an OData collection with reference values, relative to ReferenceRoot
    */
    ReferencePath: PropertyAnnotationValue<Edm.String>;
    /**
        Instructions on how to construct the value list request and consume response properties
    */
    ForeignKeys: AnnotationTerm<ForeignKeyTypeTypes[]>;
};
export declare type ForeignKeyType = ComplexType & {
    $Type: CommonAnnotationTypes.ForeignKeyType;
    /**
        Path to property of the annotated entity set
    */
    Property: PropertyAnnotationValue<Edm.PropertyPath>;
    /**
        Path to property in reference set, format is identical to PropertyPath annotations
    */
    ReferencedProperty: PropertyAnnotationValue<Edm.String>;
};
/**
  The annotated entity type (e.g. `Employee`) or annotation (e.g. `IsImageUrl`) represents a natural person
*/
export declare type IsNaturalPerson = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Specifies how to get a list of acceptable values for a property or parameter
*/
export declare type ValueList = AnnotationTerm<ValueListTypeTypes>;
export declare type ValueListType = ComplexType & {
    $Type: CommonAnnotationTypes.ValueListType;
    /**
        Headline for value list, fallback is the label of the property or parameter
    */
    Label?: PropertyAnnotationValue<Edm.String>;
    /**
        Resource path of an OData collection with possible values, relative to CollectionRoot
    */
    CollectionPath: PropertyAnnotationValue<Edm.String>;
    /**
        Service root of the value list collection; not specified means local to the document containing the annotation
    */
    CollectionRoot?: PropertyAnnotationValue<Edm.String>;
    /**
        Value list supports the $search query option
    */
    SearchSupported: PropertyAnnotationValue<Edm.Boolean>;
    /**
        Hint on when to fetch values
    */
    FetchValues?: FetchValuesType;
    /**
        Alternative representation of a value help, e.g. as a bar chart
    */
    PresentationVariantQualifier?: SimpleIdentifier;
    /**
        Optional combination of parameters and filters to query the value help entity set
    */
    SelectionVariantQualifier?: SimpleIdentifier;
    /**
        Instructions on how to construct the value list request and consume response properties
    */
    Parameters: AnnotationTerm<ValueListParameterTypes[]>;
};
/**
  Hint on when to fetch values
*/
export declare type FetchValuesType = Edm.Byte;
/**
  List of qualifiers of relevant ValueList annotations
*/
export declare type ValueListRelevantQualifiers = AnnotationTerm<PropertyAnnotationValue<SimpleIdentifier[]>>;
/**
  If specified as true, there's only one value list mapping and its value list consists of a small number of fixed values
*/
export declare type ValueListWithFixedValues = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Contains the qualifier of the ValueList or ValueListMapping that should be used for validation
*/
export declare type ValueListForValidation = AnnotationTerm<PropertyAnnotationValue<Edm.String>>;
/**
  A list of URLs of CSDL documents containing value list mappings for this parameter or property
*/
export declare type ValueListReferences = AnnotationTerm<PropertyAnnotationValue<Edm.String[]>>;
/**
  Specifies the mapping between data service properties and value list properties
*/
export declare type ValueListMapping = AnnotationTerm<ValueListMappingTypeTypes>;
export declare type ValueListMappingType = ComplexType & {
    $Type: CommonAnnotationTypes.ValueListMappingType;
    /**
        Headline for value list, fallback is the label of the property or parameter
    */
    Label?: PropertyAnnotationValue<Edm.String>;
    /**
        Resource path of an OData collection with possible values, relative to the document containing the value list mapping
    */
    CollectionPath: PropertyAnnotationValue<Edm.String>;
    /**
        Hint on when to fetch values
    */
    FetchValues?: FetchValuesType;
    /**
        Alternative representation of a value help, e.g. as a bar chart
    */
    PresentationVariantQualifier?: SimpleIdentifier;
    /**
        Optional combination of parameters and filters to query the value help entity set
    */
    SelectionVariantQualifier?: SimpleIdentifier;
    /**
        Instructions on how to construct the value list request and consume response properties
    */
    Parameters: AnnotationTerm<ValueListParameterTypes[]>;
};
export declare type ValueListParameter = ComplexType & {
    $Type: CommonAnnotationTypes.ValueListParameter;
    /**
        Path to property in the value list . Format is identical to PropertyPath annotations.
    */
    ValueListProperty: PropertyAnnotationValue<Edm.String>;
};
export declare type ValueListParameterIn = ComplexType & Omit<ValueListParameter, "$Type"> & {
    $Type: CommonAnnotationTypes.ValueListParameterIn;
    /**
    Path to property that is used to filter the value list with `eq` comparison
*/
    LocalDataProperty: PropertyAnnotationValue<Edm.PropertyPath>;
    /**
    Initial value, e.g. empty string, is a valid and significant value
*/
    InitialValueIsSignificant: PropertyAnnotationValue<Edm.Boolean>;
};
export declare type ValueListParameterConstant = ComplexType & Omit<ValueListParameter, "$Type"> & {
    $Type: CommonAnnotationTypes.ValueListParameterConstant;
    /**
    Constant value that is used to filter the value list with `eq` comparison, using the same representation as property default values, see [CSDL XML, 7.2.7 Default Value](https://docs.oasis-open.org/odata/odata-csdl-xml/v4.01/odata-csdl-xml-v4.01.html#sec_DefaultValue)
*/
    Constant: PropertyAnnotationValue<Edm.PrimitiveType>;
};
export declare type ValueListParameterInOut = ComplexType & Omit<ValueListParameter, "$Type"> & {
    $Type: CommonAnnotationTypes.ValueListParameterInOut;
    /**
    Path to property that is used to filter the value list with `startswith` comparison and filled from the picked value list item
*/
    LocalDataProperty: PropertyAnnotationValue<Edm.PropertyPath>;
    /**
    Initial value, e.g. empty string, is a valid and significant value
*/
    InitialValueIsSignificant: PropertyAnnotationValue<Edm.Boolean>;
};
export declare type ValueListParameterOut = ComplexType & Omit<ValueListParameter, "$Type"> & {
    $Type: CommonAnnotationTypes.ValueListParameterOut;
    /**
    Path to property that is filled from response
*/
    LocalDataProperty: PropertyAnnotationValue<Edm.PropertyPath>;
};
/**
  Value list property that is not used to fill the edited entity
*/
export declare type ValueListParameterDisplayOnly = ComplexType & Omit<ValueListParameter, "$Type"> & {
    $Type: CommonAnnotationTypes.ValueListParameterDisplayOnly;
};
/**
  Value list property that is used to filter the value list, not connected to the edited entity
*/
export declare type ValueListParameterFilterOnly = ComplexType & Omit<ValueListParameter, "$Type"> & {
    $Type: CommonAnnotationTypes.ValueListParameterFilterOnly;
};
/**
  Property encodes a year number as string following the logical pattern (-?)YYYY(Y*) consisting of an optional
            minus sign for years B.C. followed by at least four digits. The string matches the regex pattern -?([1-9][0-9]{3,}|0[0-9]{3})
          
*/
export declare type IsCalendarYear = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Property encodes a halfyear number as string following the logical pattern H consisting of a single digit.
            The string matches the regex pattern [1-2]
          
*/
export declare type IsCalendarHalfyear = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Property encodes a calendar quarter number as string following the logical pattern Q consisting of a single digit.
            The string matches the regex pattern [1-4]
          
*/
export declare type IsCalendarQuarter = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Property encodes a calendar month number as string following the logical pattern MM consisting of two digits.
            The string matches the regex pattern 0[1-9]|1[0-2]
          
*/
export declare type IsCalendarMonth = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Property encodes a calendar week number as string following the logical pattern WW consisting of two digits.
            The string matches the regex pattern 0[1-9]|[1-4][0-9]|5[0-3]
          
*/
export declare type IsCalendarWeek = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Day number relative to a calendar month. Valid values are between 1 and 31.
          
*/
export declare type IsDayOfCalendarMonth = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Day number relative to a calendar year. Valid values are between 1 and 366.
          
*/
export declare type IsDayOfCalendarYear = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Property encodes a calendar year and halfyear as string following the logical pattern (-?)YYYY(Y*)H consisting
            of an optional minus sign for years B.C. followed by at least five digits, where the last digit represents the halfyear.
            The string matches the regex pattern -?([1-9][0-9]{3,}|0[0-9]{3})[1-2]
          
*/
export declare type IsCalendarYearHalfyear = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Property encodes a calendar year and quarter as string following the logical pattern (-?)YYYY(Y*)Q consisting
            of an optional minus sign for years B.C. followed by at least five digits, where the last digit represents the quarter.
            The string matches the regex pattern -?([1-9][0-9]{3,}|0[0-9]{3})[1-4]
          
*/
export declare type IsCalendarYearQuarter = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Property encodes a calendar year and month as string following the logical pattern (-?)YYYY(Y*)MM consisting
            of an optional minus sign for years B.C. followed by at least six digits, where the last two digits represent the months January to
            December.
            The string matches the regex pattern -?([1-9][0-9]{3,}|0[0-9]{3})(0[1-9]|1[0-2])
          
*/
export declare type IsCalendarYearMonth = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Property encodes a calendar year and week as string following the logical pattern (-?)YYYY(Y*)WW consisting
          of an optional minus sign for years B.C. followed by at least six digits, where the last two digits represent week number in the year.
          The string matches the regex pattern -?([1-9][0-9]{3,}|0[0-9]{3})(0[1-9]|[1-4][0-9]|5[0-3])
          
*/
export declare type IsCalendarYearWeek = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Property encodes a calendar date: year, month and day as string following the logical pattern (-?)YYYY(Y*)MMDD consisting
          of an optional minus sign for years B.C. followed by at least eight digits, where the last four digits represent
          the months January to December (MM) and the day of the month (DD).
          The string matches the regex pattern -?([1-9][0-9]{3,}|0[0-9]{3})(0[1-9]|1[0-2])(0[1-9]|[12][0-9]|3[01])
          The regex pattern does not reflect the additional constraint for "Day-of-month Values":
          The day value must be no more than 30 if month is one of 04, 06, 09, or 11, no more than 28 if month is 02 and year is not divisible by 4,
          or is divisible by 100 but not by 400, and no more than 29 if month is 02 and year is divisible by 400, or by 4 but not by 100.
          
*/
export declare type IsCalendarDate = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Property encodes a fiscal year number as string following the logical pattern YYYY(Y*) consisting of at least four digits.
          The string matches the regex pattern [1-9][0-9]{3,}
          
*/
export declare type IsFiscalYear = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Property encodes a fiscal period as string following the logical pattern PPP consisting of three digits.
          The string matches the regex pattern [0-9]{3}
          
*/
export declare type IsFiscalPeriod = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Property encodes a fiscal year and period as string following the logical pattern YYYY(Y*)PPP consisting
          of at least seven digits, where the last three digits represent the fiscal period in the year.
          The string matches the regex pattern ([1-9][0-9]{3,})([0-9]{3})
          
*/
export declare type IsFiscalYearPeriod = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Property encodes a fiscal quarter number as string following the logical pattern Q consisting of a single digit.
          The string matches the regex pattern [1-4]
*/
export declare type IsFiscalQuarter = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Property encodes a fiscal year and quarter as string following the logical pattern (-?)YYYY(Y*)Q consisting of
          an optional minus sign for years B.C. followed by at least five digits, where the last digit represents the quarter.
          The string matches the regex pattern -?([1-9][0-9]{3,}|0[0-9]{3})[1-4]
*/
export declare type IsFiscalYearQuarter = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Property encodes a fiscal week number as string following the logical pattern WW consisting of two digits.
          The string matches the regex pattern 0[1-9]|[1-4][0-9]|5[0-3]
*/
export declare type IsFiscalWeek = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Property encodes a fiscal year and week as string following the logical pattern (-?)YYYY(Y*)WW consisting of an
          optional minus sign for years B.C. followed by at least six digits, where the last two digits represent week number in the year.
          The string matches the regex pattern -?([1-9][0-9]{3,}|0[0-9]{3})(0[1-9]|[1-4][0-9]|5[0-3])
*/
export declare type IsFiscalYearWeek = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Day number relative to a fiscal year. Valid values are between 1 and 371.
*/
export declare type IsDayOfFiscalYear = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Property encodes a fiscal year variant
*/
export declare type IsFiscalYearVariant = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Only one term of the group identified with the Qualifier attribute can be applied
*/
export declare type MutuallyExclusiveTerm = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
/**
  Root entities of business documents that support the draft pattern
*/
export declare type DraftRoot = AnnotationTerm<DraftRootTypeTypes>;
export declare type DraftRootType = ComplexType & Omit<DraftNodeType, "$Type"> & {
    $Type: CommonAnnotationTypes.DraftRootType;
    /**
    Action that activates a draft document
*/
    ActivationAction: QualifiedName;
    /**
    Action that discards a draft document
*/
    DiscardAction?: QualifiedName;
    /**
    Action that creates an edit draft
*/
    EditAction?: QualifiedName;
    /**
    Action that creates a new draft
*/
    NewAction?: QualifiedName;
    /**
    Additional actions that create a new draft
*/
    AdditionalNewActions: QualifiedName[];
};
/**
  Entities in this set are parts of business documents that support the draft pattern
*/
export declare type DraftNode = AnnotationTerm<DraftNodeTypeTypes>;
export declare type DraftNodeType = ComplexType & {
    $Type: CommonAnnotationTypes.DraftNodeType;
    /**
        Action that prepares a draft document for later activation
    */
    PreparationAction?: QualifiedName;
    /**
        Function that validates whether a draft document is ready for activation
    */
    ValidationFunction?: QualifiedName;
};
/**
  Draft entities in this set are indirectly activated via draft entities in the referenced entity sets
*/
export declare type DraftActivationVia = AnnotationTerm<PropertyAnnotationValue<SimpleIdentifier[]>>;
/**
  The annotated property is an editable field for the referenced key property
*/
export declare type EditableFieldFor = AnnotationTerm<Edm.PropertyPath>;
/**
  The SimpleIdentifier of an OData construct in scope
*/
export declare type SimpleIdentifier = Edm.String;
/**
  The QualifiedName of an OData construct in scope
*/
export declare type QualifiedName = Edm.String;
/**
  The qualified name of an action with an optional overload
*/
export declare type ActionOverload = Edm.String;
/**
  The listed properties form the semantic key, i.e. they are unique modulo IsActiveEntity
*/
export declare type SemanticKey = AnnotationTerm<Edm.PropertyPath[]>;
/**
  Describes side-effects of modification operations
*/
export declare type SideEffects = AnnotationTerm<SideEffectsTypeTypes>;
/**
  Changes to the source properties or source entities may have side-effects on the target properties or entities.
*/
export declare type SideEffectsType = ComplexType & {
    $Type: CommonAnnotationTypes.SideEffectsType;
    /**
        Changes to the values of one or more of these structural properties may affect the targets
    */
    SourceProperties: PropertyAnnotationValue<Edm.PropertyPath[]>;
    /**
        Changes to one or more of these entities may affect the targets. An empty path means the annotation target.
    */
    SourceEntities: PropertyAnnotationValue<Edm.NavigationPropertyPath[]>;
    /**
        These structural properties may be affected if the value of one of the sources changes
    */
    TargetProperties: PropertyAnnotationValue<Edm.String[]>;
    /**
        These entities will be affected if the value of one of the sources changes. All affected entities need to be explicitly listed. An empty path means the annotation target.
    */
    TargetEntities: PropertyAnnotationValue<Edm.NavigationPropertyPath[]>;
    /**
        One or more of the targets may show these effects. If not specified, any effect is possible.
    */
    EffectTypes?: EffectType;
    /**
        Bound action to trigger side-effects after modifying an entity
    */
    TriggerAction?: QualifiedName;
    /**
        Indicates whether the side-effect has already happened
    */
    TriggeredIndicator?: PropertyAnnotationValue<Edm.Boolean>;
};
export declare const enum EffectType {
    /**
    Validation messages are assigned to a target
    */
    /**
    This side effect type indicates that validation messages may result from changes of source properties or entities.
Thus, a validation request can be sent either in conjunction with or separately after a modifying request.
Validation messages shall be persisted with the draft and immediately available in a subsequent request without repeating the validation logic.
    */
    ValidationMessage = "Common.EffectType/ValidationMessage",
    /**
    The value of a target changes
    */
    /**
    This side effect type declares that changes to source properties or entities may impact the values of any, one or multiple target properties or entities.
Upon modification preparation logic is performed that determines additional values to be stored in the draft document.
    */
    ValueChange = "Common.EffectType/ValueChange",
    /**
    The value of the Common.FieldControl annotation of a target changes
    */
    /**
    This side effect type specifies that source properties or entities may impact the dynamic field control state of any, one or multiple target properties or entities.
Upon modification field control logic is invoked so that meta-information like hidden or read-only is determined.
    */
    FieldControlChange = "Common.EffectType/FieldControlChange"
}
/**
  Function to calculate default values based on user input that is only known to the client and "context information" that is already available to the service
*/
export declare type DefaultValuesFunction = AnnotationTerm<PropertyAnnotationValue<QualifiedName>>;
/**
  Function import to derive a default value for the property from a given context.
*/
export declare type DerivedDefaultValue = AnnotationTerm<PropertyAnnotationValue<Edm.String>>;
/**
  A default value for the property to be used in filter expressions.
*/
export declare type FilterDefaultValue = AnnotationTerm<Edm.PrimitiveType>;
/**
  A default upper limit for the property to be used in 'less than or equal' filter expressions.
*/
export declare type FilterDefaultValueHigh = AnnotationTerm<Edm.PrimitiveType>;
/**
  Function import to derive a default value for the property from a given context in order to use it in filter expressions.
*/
export declare type DerivedFilterDefaultValue = AnnotationTerm<PropertyAnnotationValue<Edm.String>>;
/**
  List of sort criteria
*/
export declare type SortOrder = AnnotationTerm<SortOrderTypeTypes[]>;
export declare type SortOrderType = ComplexType & {
    $Type: CommonAnnotationTypes.SortOrderType;
    /**
        Sort property
    */
    Property: PropertyAnnotationValue<Edm.PropertyPath>;
    /**
        Sort direction, ascending if not specified otherwise
    */
    Descending?: PropertyAnnotationValue<Edm.Boolean>;
};
/**
  Defines a recursive hierarchy.
*/
export declare type RecursiveHierarchy = AnnotationTerm<RecursiveHierarchyTypeTypes>;
export declare type RecursiveHierarchyType = ComplexType & {
    $Type: CommonAnnotationTypes.RecursiveHierarchyType;
    /**
        Property holding the external human-readable key identifying the node
    */
    ExternalNodeKeyProperty?: PropertyAnnotationValue<Edm.PropertyPath>;
    /**
        Property holding the descendant count for a hierarchy node.
            The descendant count of a node is the number of its descendants in the hierarchy structure of the result considering
            only those nodes matching any specified $filter and $search. A property holding descendant counts has an integer
            data type.
    */
    NodeDescendantCountProperty?: PropertyAnnotationValue<Edm.PropertyPath>;
    /**
        Property holding the drill state of a hierarchy node. The drill state is indicated
            by one of the following string values: collapsed, expanded, or leaf. For an expanded node, its
            children are included in the result collection. For a collapsed node, the children are included in the entity set, but
            they are not part of the result collection. Retrieving them requires a relaxed filter expression or a separate request
            filtering on the parent node ID with the ID of the collapsed node. A leaf does not have any child in the entity set.
            
    */
    NodeDrillStateProperty?: PropertyAnnotationValue<Edm.PropertyPath>;
};
/**
  Creation timestamp
*/
export declare type CreatedAt = AnnotationTerm<Edm.DateTimeOffset>;
/**
  First editor
*/
export declare type CreatedBy = AnnotationTerm<PropertyAnnotationValue<UserID>>;
/**
  Last modification timestamp
*/
export declare type ChangedAt = AnnotationTerm<Edm.DateTimeOffset>;
/**
  Last editor
*/
export declare type ChangedBy = AnnotationTerm<PropertyAnnotationValue<UserID>>;
/**
  User ID
*/
export declare type UserID = Edm.String;
/**
  Original protocol version of a converted (V4) CSDL document, allowed values `2.0` and `3.0`
*/
export declare type OriginalProtocolVersion = AnnotationTerm<PropertyAnnotationValue<Edm.String>>;
/**
  Sorting and filtering of amounts in multiple currencies needs special consideration
*/
export declare type ApplyMultiUnitBehaviorForSortingAndFiltering = AnnotationTerm<PropertyAnnotationValue<Core.Tag>>;
export declare const enum CommonAnnotationTerms {
    Experimental = "com.sap.vocabularies.Common.v1.Experimental",
    ServiceVersion = "com.sap.vocabularies.Common.v1.ServiceVersion",
    ServiceSchemaVersion = "com.sap.vocabularies.Common.v1.ServiceSchemaVersion",
    Label = "com.sap.vocabularies.Common.v1.Label",
    Heading = "com.sap.vocabularies.Common.v1.Heading",
    QuickInfo = "com.sap.vocabularies.Common.v1.QuickInfo",
    Text = "com.sap.vocabularies.Common.v1.Text",
    TextFor = "com.sap.vocabularies.Common.v1.TextFor",
    IsLanguageIdentifier = "com.sap.vocabularies.Common.v1.IsLanguageIdentifier",
    TextFormat = "com.sap.vocabularies.Common.v1.TextFormat",
    IsDigitSequence = "com.sap.vocabularies.Common.v1.IsDigitSequence",
    IsUpperCase = "com.sap.vocabularies.Common.v1.IsUpperCase",
    IsCurrency = "com.sap.vocabularies.Common.v1.IsCurrency",
    IsUnit = "com.sap.vocabularies.Common.v1.IsUnit",
    UnitSpecificScale = "com.sap.vocabularies.Common.v1.UnitSpecificScale",
    UnitSpecificPrecision = "com.sap.vocabularies.Common.v1.UnitSpecificPrecision",
    SecondaryKey = "com.sap.vocabularies.Common.v1.SecondaryKey",
    MinOccurs = "com.sap.vocabularies.Common.v1.MinOccurs",
    MaxOccurs = "com.sap.vocabularies.Common.v1.MaxOccurs",
    AssociationEntity = "com.sap.vocabularies.Common.v1.AssociationEntity",
    DerivedNavigation = "com.sap.vocabularies.Common.v1.DerivedNavigation",
    Masked = "com.sap.vocabularies.Common.v1.Masked",
    MaskedValue = "com.sap.vocabularies.Common.v1.MaskedValue",
    MaskedAlways = "com.sap.vocabularies.Common.v1.MaskedAlways",
    SemanticObject = "com.sap.vocabularies.Common.v1.SemanticObject",
    SemanticObjectMapping = "com.sap.vocabularies.Common.v1.SemanticObjectMapping",
    SemanticObjectUnavailableActions = "com.sap.vocabularies.Common.v1.SemanticObjectUnavailableActions",
    IsInstanceAnnotation = "com.sap.vocabularies.Common.v1.IsInstanceAnnotation",
    FilterExpressionRestrictions = "com.sap.vocabularies.Common.v1.FilterExpressionRestrictions",
    FieldControl = "com.sap.vocabularies.Common.v1.FieldControl",
    ExceptionCategory = "com.sap.vocabularies.Common.v1.ExceptionCategory",
    Application = "com.sap.vocabularies.Common.v1.Application",
    Timestamp = "com.sap.vocabularies.Common.v1.Timestamp",
    TransactionId = "com.sap.vocabularies.Common.v1.TransactionId",
    ErrorResolution = "com.sap.vocabularies.Common.v1.ErrorResolution",
    Messages = "com.sap.vocabularies.Common.v1.Messages",
    additionalTargets = "com.sap.vocabularies.Common.v1.additionalTargets",
    longtextUrl = "com.sap.vocabularies.Common.v1.longtextUrl",
    numericSeverity = "com.sap.vocabularies.Common.v1.numericSeverity",
    MaximumNumericMessageSeverity = "com.sap.vocabularies.Common.v1.MaximumNumericMessageSeverity",
    IsActionCritical = "com.sap.vocabularies.Common.v1.IsActionCritical",
    Attributes = "com.sap.vocabularies.Common.v1.Attributes",
    RelatedRecursiveHierarchy = "com.sap.vocabularies.Common.v1.RelatedRecursiveHierarchy",
    Interval = "com.sap.vocabularies.Common.v1.Interval",
    ResultContext = "com.sap.vocabularies.Common.v1.ResultContext",
    WeakReferentialConstraint = "com.sap.vocabularies.Common.v1.WeakReferentialConstraint",
    IsNaturalPerson = "com.sap.vocabularies.Common.v1.IsNaturalPerson",
    ValueList = "com.sap.vocabularies.Common.v1.ValueList",
    ValueListRelevantQualifiers = "com.sap.vocabularies.Common.v1.ValueListRelevantQualifiers",
    ValueListWithFixedValues = "com.sap.vocabularies.Common.v1.ValueListWithFixedValues",
    ValueListForValidation = "com.sap.vocabularies.Common.v1.ValueListForValidation",
    ValueListReferences = "com.sap.vocabularies.Common.v1.ValueListReferences",
    ValueListMapping = "com.sap.vocabularies.Common.v1.ValueListMapping",
    IsCalendarYear = "com.sap.vocabularies.Common.v1.IsCalendarYear",
    IsCalendarHalfyear = "com.sap.vocabularies.Common.v1.IsCalendarHalfyear",
    IsCalendarQuarter = "com.sap.vocabularies.Common.v1.IsCalendarQuarter",
    IsCalendarMonth = "com.sap.vocabularies.Common.v1.IsCalendarMonth",
    IsCalendarWeek = "com.sap.vocabularies.Common.v1.IsCalendarWeek",
    IsDayOfCalendarMonth = "com.sap.vocabularies.Common.v1.IsDayOfCalendarMonth",
    IsDayOfCalendarYear = "com.sap.vocabularies.Common.v1.IsDayOfCalendarYear",
    IsCalendarYearHalfyear = "com.sap.vocabularies.Common.v1.IsCalendarYearHalfyear",
    IsCalendarYearQuarter = "com.sap.vocabularies.Common.v1.IsCalendarYearQuarter",
    IsCalendarYearMonth = "com.sap.vocabularies.Common.v1.IsCalendarYearMonth",
    IsCalendarYearWeek = "com.sap.vocabularies.Common.v1.IsCalendarYearWeek",
    IsCalendarDate = "com.sap.vocabularies.Common.v1.IsCalendarDate",
    IsFiscalYear = "com.sap.vocabularies.Common.v1.IsFiscalYear",
    IsFiscalPeriod = "com.sap.vocabularies.Common.v1.IsFiscalPeriod",
    IsFiscalYearPeriod = "com.sap.vocabularies.Common.v1.IsFiscalYearPeriod",
    IsFiscalQuarter = "com.sap.vocabularies.Common.v1.IsFiscalQuarter",
    IsFiscalYearQuarter = "com.sap.vocabularies.Common.v1.IsFiscalYearQuarter",
    IsFiscalWeek = "com.sap.vocabularies.Common.v1.IsFiscalWeek",
    IsFiscalYearWeek = "com.sap.vocabularies.Common.v1.IsFiscalYearWeek",
    IsDayOfFiscalYear = "com.sap.vocabularies.Common.v1.IsDayOfFiscalYear",
    IsFiscalYearVariant = "com.sap.vocabularies.Common.v1.IsFiscalYearVariant",
    MutuallyExclusiveTerm = "com.sap.vocabularies.Common.v1.MutuallyExclusiveTerm",
    DraftRoot = "com.sap.vocabularies.Common.v1.DraftRoot",
    DraftNode = "com.sap.vocabularies.Common.v1.DraftNode",
    DraftActivationVia = "com.sap.vocabularies.Common.v1.DraftActivationVia",
    EditableFieldFor = "com.sap.vocabularies.Common.v1.EditableFieldFor",
    SemanticKey = "com.sap.vocabularies.Common.v1.SemanticKey",
    SideEffects = "com.sap.vocabularies.Common.v1.SideEffects",
    DefaultValuesFunction = "com.sap.vocabularies.Common.v1.DefaultValuesFunction",
    DerivedDefaultValue = "com.sap.vocabularies.Common.v1.DerivedDefaultValue",
    FilterDefaultValue = "com.sap.vocabularies.Common.v1.FilterDefaultValue",
    FilterDefaultValueHigh = "com.sap.vocabularies.Common.v1.FilterDefaultValueHigh",
    DerivedFilterDefaultValue = "com.sap.vocabularies.Common.v1.DerivedFilterDefaultValue",
    SortOrder = "com.sap.vocabularies.Common.v1.SortOrder",
    RecursiveHierarchy = "com.sap.vocabularies.Common.v1.RecursiveHierarchy",
    CreatedAt = "com.sap.vocabularies.Common.v1.CreatedAt",
    CreatedBy = "com.sap.vocabularies.Common.v1.CreatedBy",
    ChangedAt = "com.sap.vocabularies.Common.v1.ChangedAt",
    ChangedBy = "com.sap.vocabularies.Common.v1.ChangedBy",
    OriginalProtocolVersion = "com.sap.vocabularies.Common.v1.OriginalProtocolVersion",
    ApplyMultiUnitBehaviorForSortingAndFiltering = "com.sap.vocabularies.Common.v1.ApplyMultiUnitBehaviorForSortingAndFiltering"
}
export declare const enum CommonAnnotationTypes {
    SemanticObjectMappingType = "com.sap.vocabularies.Common.v1.SemanticObjectMappingType",
    FilterExpressionRestrictionType = "com.sap.vocabularies.Common.v1.FilterExpressionRestrictionType",
    ApplicationType = "com.sap.vocabularies.Common.v1.ApplicationType",
    ErrorResolutionType = "com.sap.vocabularies.Common.v1.ErrorResolutionType",
    IntervalType = "com.sap.vocabularies.Common.v1.IntervalType",
    WeakReferentialConstraintType = "com.sap.vocabularies.Common.v1.WeakReferentialConstraintType",
    ForeignKeyType = "com.sap.vocabularies.Common.v1.ForeignKeyType",
    ValueListType = "com.sap.vocabularies.Common.v1.ValueListType",
    ValueListMappingType = "com.sap.vocabularies.Common.v1.ValueListMappingType",
    ValueListParameter = "com.sap.vocabularies.Common.v1.ValueListParameter",
    ValueListParameterIn = "com.sap.vocabularies.Common.v1.ValueListParameterIn",
    ValueListParameterConstant = "com.sap.vocabularies.Common.v1.ValueListParameterConstant",
    ValueListParameterInOut = "com.sap.vocabularies.Common.v1.ValueListParameterInOut",
    ValueListParameterOut = "com.sap.vocabularies.Common.v1.ValueListParameterOut",
    ValueListParameterDisplayOnly = "com.sap.vocabularies.Common.v1.ValueListParameterDisplayOnly",
    ValueListParameterFilterOnly = "com.sap.vocabularies.Common.v1.ValueListParameterFilterOnly",
    DraftRootType = "com.sap.vocabularies.Common.v1.DraftRootType",
    DraftNodeType = "com.sap.vocabularies.Common.v1.DraftNodeType",
    SideEffectsType = "com.sap.vocabularies.Common.v1.SideEffectsType",
    SortOrderType = "com.sap.vocabularies.Common.v1.SortOrderType",
    RecursiveHierarchyType = "com.sap.vocabularies.Common.v1.RecursiveHierarchyType"
}
export declare type SemanticObjectMappingTypeTypes = AnnotationTerm<SemanticObjectMappingType>;
export declare type FilterExpressionRestrictionTypeTypes = AnnotationTerm<FilterExpressionRestrictionType>;
export declare type ApplicationTypeTypes = AnnotationTerm<ApplicationType>;
export declare type ErrorResolutionTypeTypes = AnnotationTerm<ErrorResolutionType>;
export declare type IntervalTypeTypes = AnnotationTerm<IntervalType>;
export declare type WeakReferentialConstraintTypeTypes = AnnotationTerm<WeakReferentialConstraintType>;
export declare type ForeignKeyTypeTypes = AnnotationTerm<ForeignKeyType>;
export declare type ValueListTypeTypes = AnnotationTerm<ValueListType>;
export declare type ValueListMappingTypeTypes = AnnotationTerm<ValueListMappingType>;
export declare type ValueListParameterTypes = AnnotationTerm<ValueListParameterInTypes | ValueListParameterConstantTypes | ValueListParameterInOutTypes | ValueListParameterOutTypes | ValueListParameterDisplayOnlyTypes | ValueListParameterFilterOnlyTypes>;
export declare type ValueListParameterInTypes = AnnotationTerm<ValueListParameterIn>;
export declare type ValueListParameterConstantTypes = AnnotationTerm<ValueListParameterConstant>;
export declare type ValueListParameterInOutTypes = AnnotationTerm<ValueListParameterInOut>;
export declare type ValueListParameterOutTypes = AnnotationTerm<ValueListParameterOut>;
export declare type ValueListParameterDisplayOnlyTypes = AnnotationTerm<ValueListParameterDisplayOnly>;
export declare type ValueListParameterFilterOnlyTypes = AnnotationTerm<ValueListParameterFilterOnly>;
export declare type DraftRootTypeTypes = AnnotationTerm<DraftRootType>;
export declare type DraftNodeTypeTypes = AnnotationTerm<DraftNodeType | DraftRootTypeTypes>;
export declare type SideEffectsTypeTypes = AnnotationTerm<SideEffectsType>;
export declare type SortOrderTypeTypes = AnnotationTerm<SortOrderType>;
export declare type RecursiveHierarchyTypeTypes = AnnotationTerm<RecursiveHierarchyType>;
