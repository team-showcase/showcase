export declare type SimpleIdentifier = string;
export declare type FullyQualifiedName = string;
declare type GenericExpression<K extends keyof any, T> = {
    [P in K]: T;
} & {
    type: K;
};
export declare type Apply = any;
export declare type If = any;
export declare type StringExpression = GenericExpression<"String", string>;
export declare type BoolExpression = GenericExpression<"Bool", boolean>;
export declare type DecimalExpression = GenericExpression<"Decimal", number>;
export declare type DateExpression = GenericExpression<"Date", string>;
export declare type IntExpression = GenericExpression<"Int", number>;
export declare type PathExpression = GenericExpression<"Path", string>;
export declare type PropertyPathExpression = GenericExpression<"PropertyPath", string>;
export declare type AnnotationPathExpression = GenericExpression<"AnnotationPath", string>;
export declare type NavigationPropertyPathExpression = GenericExpression<"NavigationPropertyPath", string>;
export declare type EnumMemberExpression = GenericExpression<"EnumMember", string>;
export declare type CollectionExpression = GenericExpression<"Collection", Collection>;
export declare type RecordExpression = GenericExpression<"Record", AnnotationRecord>;
export declare type ApplyExpression = GenericExpression<"Apply", Apply>;
export declare type IfExpression = GenericExpression<"If", If>;
export declare type UnknownExpression = {
    type: "Unknown";
};
export declare type Expression = UnknownExpression | StringExpression | BoolExpression | DecimalExpression | IntExpression | DateExpression | PathExpression | PropertyPathExpression | AnnotationPathExpression | NavigationPropertyPathExpression | EnumMemberExpression | CollectionExpression | RecordExpression | ApplyExpression | IfExpression;
export declare type Collection = AnnotationRecord[] | string[] | PropertyPathExpression[] | PathExpression[] | NavigationPropertyPathExpression[] | AnnotationPathExpression[];
export declare type AnnotationList = {
    target: FullyQualifiedName;
    annotations: Annotation[];
};
export declare type Annotation = {
    term: FullyQualifiedName;
    qualifier?: SimpleIdentifier;
    value?: Expression;
    collection?: Collection;
    record?: AnnotationRecord;
    annotations?: Annotation[];
};
export declare type PropertyValue = {
    name: SimpleIdentifier;
    value: Expression;
    annotations?: Annotation[];
};
export declare type AnnotationRecord = {
    type?: FullyQualifiedName;
    propertyValues: PropertyValue[];
    annotations?: Annotation[];
};
export {};
