import { EntityType as _EntityType, Action as _Action, Property, NavigationProperty } from "./Converter";
import { RecordAnnotations, TermAnnotations, AnnotationAnnotations } from "./generated/Edm_Types";
export declare type PropertyPath = {
    fullyQualifiedName: string;
    type: "PropertyPath";
    value: string;
    $target: Property;
};
export declare type NavigationPropertyPath = {
    type: "NavigationPropertyPath";
    value: string;
    $target: NavigationProperty;
};
export declare type AnnotationPath<P> = {
    type: "AnnotationPath";
    value: string;
    $target: AnnotationTerm<P>;
};
declare type PrimitiveTypeCast<P, G> = (P extends boolean ? boolean | (BooleanConstructor & G) : never) | (P extends number ? number | (NumberConstructor & G) : never) | (P extends string ? string | (StringConstructor & G) : never) | (P & G);
export declare type AnnotationTerm<P> = PrimitiveTypeCast<P, {
    fullyQualifiedName: string;
    term: string;
    qualifier: string;
    annotations?: TermAnnotations & AnnotationAnnotations;
}>;
export declare type PathAnnotationExpression<P> = {
    type: "Path";
    path: string;
    $target: P;
    getValue(): P;
};
export declare type ApplyAnnotationExpression<P> = {
    type: "Apply";
    value: any;
    getValue(): P;
};
export declare type EqConditionalExpression = {
    $Eq: [ConditionalCheckOrValue, ConditionalCheckOrValue];
};
export declare type NeConditionalExpression = {
    $Ne: [ConditionalCheckOrValue, ConditionalCheckOrValue];
};
export declare type GtConditionalExpression = {
    $Gt: [ConditionalCheckOrValue, ConditionalCheckOrValue];
};
export declare type GeConditionalExpression = {
    $Ge: [ConditionalCheckOrValue, ConditionalCheckOrValue];
};
export declare type LtConditionalExpression = {
    $Lt: [ConditionalCheckOrValue, ConditionalCheckOrValue];
};
export declare type LeConditionalExpression = {
    $Le: [ConditionalCheckOrValue, ConditionalCheckOrValue];
};
export declare type AndConditionalExpression = {
    $And: [ConditionalCheckOrValue, ConditionalCheckOrValue];
};
export declare type OrConditionalExpression = {
    $Or: [ConditionalCheckOrValue, ConditionalCheckOrValue];
};
export declare type NotConditionalExpression = {
    $Not: [ConditionalCheckOrValue];
};
export declare type PathConditionExpression<T> = {
    $Path: string;
};
export declare type ConditionalCheck = OrConditionalExpression | AndConditionalExpression | NotConditionalExpression | EqConditionalExpression | NeConditionalExpression | GtConditionalExpression | GeConditionalExpression | LtConditionalExpression | LeConditionalExpression;
export declare type ConditionalCheckOrValue = null | string | number | boolean | ConditionalCheck | PathConditionExpression<string | number | boolean>;
export declare type IfAnnotationExpressionValue<OutType> = [ConditionalCheck, OutType, OutType];
export declare type IfAnnotationExpression<P> = {
    type: "If";
    If: IfAnnotationExpressionValue<P>;
    getValue(): P;
};
export declare type PropertyAnnotationValue<P> = P | PathAnnotationExpression<P> | ApplyAnnotationExpression<P> | IfAnnotationExpression<P>;
export declare type String = string;
export declare type InstancePath = string;
export declare type Boolean = boolean;
export declare type Byte = number;
export declare type Int16 = number;
export declare type Int32 = number;
export declare type Int64 = number;
export declare type Time = string;
export declare type Binary = string;
export declare type Decimal = number;
export declare type Double = number;
export declare type Date = string;
export declare type Guid = any;
export declare type Duration = any;
export declare type DateTimeOffset = any;
export declare type GeographyPoint = any;
export declare type PrimitiveType = Binary | Boolean | Byte | Date | DateTimeOffset | Decimal | Double | Duration | Guid | Int16 | Int32 | Int64 | String | GeographyPoint;
export declare type EnumValue<P> = P | PathAnnotationExpression<P> | ApplyAnnotationExpression<P> | IfAnnotationExpression<P>;
export declare type ComplexType = {
    annotations?: RecordAnnotations;
};
export declare type EntityType = _EntityType;
export declare type Action = _Action;
export {};
