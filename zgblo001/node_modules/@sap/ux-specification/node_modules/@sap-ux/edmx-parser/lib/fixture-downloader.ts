import * as fs from "fs-extra";
import * as path from "path";
import axios from "axios";
import * as shell from "shelljs";
import extract from "extract-zip";
import { writeFile } from "fs-extra";

const s4Backend = "https://ccw-715.wdf.sap.corp";
const s4User = process.env.USERNAME || "";
const s4Password = process.env.PASSWORD || "";
process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

async function parseProject() {
	const projectFile = (await fs.readFile(path.join(__dirname, "projects.csv"))).toString("UTF-8");
	const projectLines: string[] = projectFile.split("\n");
	let doneCount = 0;
	const fileIndex: string[] = [];
	return Promise.all(
		projectLines.map(async function(projectLine) {
			const elements = projectLine.split(";");
			const gitRepo = elements[0];
			const gitBranch = elements[1];
			const projectType = elements[2];
			const oDataUrl = elements[3];
			if (projectType === "FIORI_ELEMENTS_V2" && oDataUrl.length > 0) {
				const oDataUrlSplit = oDataUrl.split("/");
				try {
					const fileName = oDataUrlSplit[oDataUrlSplit.length - 2];
					fileIndex.push(fileName);
					const serviceFolder = path.join(__dirname, "../test/fixtures/v2", fileName);
					await fs.ensureDir(serviceFolder);
					let metadataDownloaded = false;
					if (!fs.existsSync(path.join(serviceFolder, "metadata.xml"))) {
						try {
							const response = await axios.get(oDataUrl + "$metadata", {
								baseURL: s4Backend,
								auth: { username: s4User, password: s4Password }
							});

							await writeFile(path.join(serviceFolder, "metadata.xml"), response.data);
							metadataDownloaded = true;
						} catch (e) {
							console.log(serviceFolder + " :: unable to get metadata");
						}
					}

					const targetFile = path.join(serviceFolder, "manifest.json.zip");
					//if(!fs.existsSync(targetFile)) {
					const command = `git archive --format=zip --remote=ssh://${gitRepo.trim()} ${gitBranch} webapp/manifest.json webapp/localService webapp/annotations -o ${targetFile}`;
					console.log(command);
					if (shell.exec(command).code !== 0) {
						shell.echo("Error: Git command failed");
						shell.exit(1);
					}
					const extractPromise = new Promise((resolve, reject) => {
						extract(targetFile, { dir: serviceFolder }, function(err) {
							// extraction is complete. make sure to handle the err
							if (!err) {
								resolve();
							} else {
								reject(err);
							}
						});
					});
					await extractPromise;
					// }

					const manifestJSON = JSON.parse(
						(await fs.readFile(path.join(serviceFolder, "webapp/manifest.json"))).toString("UTF-8")
					);
					if (!metadataDownloaded) {
						var odataServiceName = Object.keys(manifestJSON["sap.app"].dataSources).find(dataSourceName => {
							return manifestJSON["sap.app"].dataSources[dataSourceName].type === "OData";
						});
						if (odataServiceName) {
							const localURI = manifestJSON["sap.app"].dataSources[odataServiceName].settings.localUri;
							if (localURI) {
								await fs.copyFile(
									path.join(serviceFolder, "webapp", localURI),
									path.join(serviceFolder, "metadata.xml")
								);
							}
						}
					}
					await Promise.all(
						Object.keys(manifestJSON["sap.app"].dataSources).map(async dataSourceName => {
							const dataSource = manifestJSON["sap.app"].dataSources[dataSourceName];
							if (dataSource.type === "ODataAnnotation") {
								if (dataSource.uri.startsWith("/sap/opu/odata/")) {
									const annotationResponse = await axios.get(dataSource.uri, {
										baseURL: s4Backend,
										auth: { username: s4User, password: s4Password }
									});
									await writeFile(
										path.join(serviceFolder, `${dataSourceName}.annotation.xml`),
										annotationResponse.data
									);
								}
							}
						})
					);

					doneCount++;
				} catch (e) {
					console.log(e);
					doneCount++;
				}
			} else {
				doneCount++;
			}
			//console.log(`Done ${doneCount} / ${projectLines.length}`);
		})
	).then(async () => {
		return await fs.writeFile(path.join(__dirname, "../test/fixtures/v2", "index.json"), JSON.stringify(fileIndex));
	});
}

parseProject()
	.then(() => {
		console.log("Done");
	})
	.catch(error => {
		console.log(error);
	});
