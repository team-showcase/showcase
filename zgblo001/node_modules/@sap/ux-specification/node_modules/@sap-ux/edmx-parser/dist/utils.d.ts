/**
 * Given an object that is either an array or a single element, make sure the output it always wrapped as an array
 * @param sourceObject an object or an array
 * @returns either the original array or the same element wrapped in an arrays
 */
import { AnnotationList, ParserOutput } from "@sap-ux/vocabularies-types";
import { Action, Association, EntityContainer, EntitySet, EntityType, Reference, Schema, ComplexType } from "@sap-ux/vocabularies-types/dist/Parser";
export declare function ensureArray<T>(sourceObject: T | T[] | undefined): T[];
export declare class ParserOutputInstance implements ParserOutput {
    references: Reference[];
    schema: Schema;
    version: string;
    identification: string;
    constructor(fileIdentification: string, version: string, schema: Schema, references: Reference[]);
    unalias(aliasedValue: string): string;
}
export declare class MergedParserOutput implements ParserOutputInstance {
    get references(): Reference[];
    get schema(): Schema;
    version: string;
    identification: string;
    _references: Reference[];
    _namespace: string;
    _parserOutput: ParserOutput[];
    _annotations: {
        [id: string]: AnnotationList[];
    };
    _associations: Association[];
    _entitySets: EntitySet[];
    _actions: Action[];
    _entityContainer: EntityContainer;
    _entityTypes: EntityType[];
    _complexTypes: ComplexType[];
    constructor(initialParserOutput: ParserOutput);
    addParserOutput(parserOutput: ParserOutput): void;
    unalias(aliasedValue: string): string;
}
